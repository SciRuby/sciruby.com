<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Matrices | SciRuby]]></title>
  <link href="http://sciruby.com/blog/categories/matrices/atom.xml" rel="self"/>
  <link href="http://sciruby.com/"/>
  <updated>2017-10-23T20:55:53+09:00</updated>
  <id>http://sciruby.com/</id>
  <author>
    <name><![CDATA[SciRuby]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[NMatrix's first beta release (belated announcement)]]></title>
    <link href="http://sciruby.com/blog/2015/02/14/nmatrix-beta-released-belated-announcement/"/>
    <updated>2015-02-14T14:56:00+09:00</updated>
    <id>http://sciruby.com/blog/2015/02/14/nmatrix-beta-released-belated-announcement</id>
    <content type="html"><![CDATA[<p>Almost two months ago, in December, we <a href="https://rubygems.org/gems/nmatrix">release our first beta of NMatrix</a>, our
linear algebra library for the Ruby language.</p>

<p>Rather than discussing what NMatrix has (which you can find in the <a href="https://github.com/SciRuby/nmatrix/blob/master/README.rdoc">readme</a>),
I want to take this opportunity to discuss where we'd like it to go in the future. Think of this as our roadmap to 1.0.</p>

<h2>External Library Requirements</h2>

<p>NMatrix currently has an extremely limited set of Ruby gem dependencies &mdash; essentially only packable, which is
needed for some of the I/O functionality &mdash; but as with other linear algebra libraries, its native library
requirements can be problematic.</p>

<p>Specifically, NMatrix requires ATLAS &mdash; which is virtually impossible to install on many Macs, and is no longer
readily available with Yosemite &mdash; and also likes to have LAPACK around. Moreover, some would prefer to use other
math libraries with NMatrix.</p>

<p>There are several partial solutions. The clearest is that any components of NMatrix which require external non-standard
libraries need to be abstracted into separate gems &mdash; such as <tt>nmatrix-atlas</tt> and <tt>nmatrix-io</tt> &mdash; and
that these components should be interchangeable with others. NMatrix then needs to be able to fall back on either native
C/C++ or Ruby implementations of certain functionalities.</p>

<p>To this end, a number of simple LAPACK and CBLAS functions have been implemented in NMatrix, with volunteers working on
a few others (the list is available in the README). <a href="https://github.com/SciRuby/sciruby/wiki/Google-Summer-of-Code-2015-Ideas#abstraction-of-atlascblasclapack-or-openblas-into-a-separate-gem">One of our proposed Google Summer of Code 2015 project ideas</a> involves
breaking up NMatrix into several gems.</p>

<p>The end result will be a much simpler installation process, and more freedom of choice.</p>

<h2>Removal of Unnecessary Features</h2>

<p>We thought it would be quite clever to include rational number support in NMatrix, including three types (32-bit, 64-bit,
and 128-bit). Unfortunately, these types increase compilation time by about 30% (back-of-the-envelope calculation), and
aren't particularly useful since most matrix operations with rationals as inputs give irrational-valued matrices
as their outputs. The inclusion of rational types also complicates the codebase.</p>

<p>Additionally, rationals are computationally problematic; what happens if there is overflow? Ruby handles overflow gracefully
in its own rational type, which NMatrix users would still be able to utilize via the <tt>:object</tt> dtype.</p>

<h2>You</h2>

<p>The biggest change going forward is that NMatrix development needs to support actual use-cases. In the past, we've aimed
to flesh out support for sparse storage formats, as well as math operations for the dense storage-type. It is folly to
develop features no one wants to use. Future core development, then, will aim to make NMatrix's current feature set more
usable.</p>

<p>That means that future non-core development depends on you. What would you like to see in NMatrix? What would make it
more useful for you?</p>

<p>If you want to become involved, now is a good time. We're getting ready to submit a Google Summer of Code application
(our third, I believe), and we're in need of students &mdash; <em>and especially mentors</em>. Please consider joining
our <a href="https://groups.google.com/forum/#!forum/sciruby-dev">mailing list</a> and adding yourself as a mentor on the
<a href="https://github.com/SciRuby/sciruby/wiki/Google-Summer-of-Code-2015-Ideas">ideas page</a>.</p>

<p>Thanks so much for your support!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to use NMatrix's shortcuts]]></title>
    <link href="http://sciruby.com/blog/2012/12/07/how-to-use-nmatrix-shortcuts/"/>
    <updated>2012-12-07T12:30:00+09:00</updated>
    <id>http://sciruby.com/blog/2012/12/07/how-to-use-nmatrix-shortcuts</id>
    <content type="html"><![CDATA[<p class="warning"><strong>Warning:</strong> This code predates v0.0.9 alpha, which is when the NMatrix constructor changed. Please check the <a href="https://github.com/SciRuby/nmatrix/wiki/Getting-started#shortcuts">NMatrix Getting Started guide</a> for the most recent information.</p>


<p>John Woods <a href="https://github.com/SciRuby/nmatrix/commit/2b480ce0985affc7218fc341fcb4e5024b30545b">merged my last pull request to NMatrix</a> recently and I wanted to write about why we created these shortcuts and what can be done with them. <!--more--></p>

<h2>The need for shortcuts</h2>

<p>The first iteration of NMatrix shortcuts was written by <a href="https://github.com/dcarrera">Daniel Carrera</a> and sent to the mailing list, where I started working with them. Some discussions, decisions and two pull requests later, we have a working set of methods to create common matrices (<code>zeros</code>, <code>ones</code>, <code>random</code>, etc) and do some cool stuff (<code>column</code> and <code>linspace</code>) very easily.</p>

<p>There are at least two good reasons to have these shortcuts: MATLAB users are going to feel at home, and the shortcuts allow us to prototype and experiment more rapidly. For example, it's dead simple to create an identify matrix when you need one:</p>

<pre><code>&gt;&gt; require 'nmatrix'

&gt;&gt; matrix = NMatrix.identity(3) # 3x3
=&gt; #&lt;NMatrix:0x007faa5b8cda40shape:[3,3] dtype:float64 stype:dense&gt; 
&gt;&gt; matrix.pp

# [1.0, 0.0, 0.0]
# [0.0, 1.0, 0.0]
# [0.0, 0.0, 1.0]
</code></pre>

<p>And a random matrix to test some operation:</p>

<pre><code>&gt;&gt; rand_matrix = NMatrix.random(4) # 4x4
=&gt; #&lt;NMatrix:0x007faa5b01cdd8shape:[4,4] dtype:float64 stype:dense&gt;
&gt;&gt; rand_matrix.pp

# [0.5933103148378577, 0.8556103970281977, 0.7176768395610358, 0.07160353964395305]
# [0.8566365570076784, 0.33925854948960343, 0.5994298479703805, 0.6906794137948586]
# [0.5684593743073485, 0.10273166792035393, 0.46187577773882293, 0.586085963973687]
# [0.8944982538369494, 0.9896291945923837, 0.8787034784673503, 0.5933103148378577]
</code></pre>

<h2>Shortcuts available</h2>

<p>The following list is taken from <a href="https://github.com/SciRuby/nmatrix/wiki/NMatrix">NMatrix's wiki</a>. All are class methods on <code>NMatrix</code>.</p>

<pre><code>ones(3,3)                    # A 3x3 matrix of ones.
zeros(4,4) or zeroes(4,4)    # Creates a matrix of zeros with dimensions as parameters.
identity(5,5) or eye(5,5)    # A 5x5 identity matrix. Only works with NMatrix.
seq(8)                       # An 8-vector with a sequence of values from 0 to 7.
random(6,6)                  # A 6x6 matrix of random values between 0 and 1.

column(2)                    # Return the 2nd column of the original matrix. Only works with NMatrix.

indgen(8)                    # To make IDL users happy. Same as `seq(8, :int32)`.
findgen(8)                   # Same as `seq(8, :float32)`.
bindgen(8)                   # Same as `seq(8, :byte)`.
cindgen(8)                   # Same as `seq(8, :complex64)`.

linspace(0, pi, 100)         # A vector of 100 values from 0 to pi, inclusive. Only works with NVector.
</code></pre>

<p>The method names are mostly from MATLAB. In the future, when more functionality is added, we'll try to create a more "Ruby-like" feel to the API. But as these shortcuts do very primitive tasks, there isn't any obvious room for improvement. (Feel free to prove us wrong, however!)</p>

<p>I'll create a separate wiki page for the shortcuts to be able to organize and put more information about how to use them. But I want to create a better RDoc documentation for NMatrix â€” so the full API will probably be referenced there. I'll write a new blog post here when something along these lines is done.</p>

<h2>Examples</h2>

<p>First, let's try normalizing the columns of an NMatrix.</p>

<pre><code>require 'nmatrix'

m = NMatrix.seq(3, :float32)
m.pp

# [0.0, 1.0, 2.0]
# [3.0, 4.0, 5.0]
# [6.0, 7.0, 8.0]

(0 .. m.shape[1] - 1).each do |j|
  col = m.column(j)
    norm = Math.sqrt(col.transpose.dot(col)[0, 0])
    (0 .. m.shape[0] - 1).each { |i| m[i,j] /= norm }
end

m.pp

# [0.0, 0.12309148907661438, 0.20739033818244934]
# [0.4472135901451111, 0.4923659563064575, 0.5184758305549622]
# [0.8944271802902222, 0.861640453338623, 0.8295613527297974]

(0 .. m.shape[1] - 1).each do |j|
  col = m.column(j)
  puts Math.sqrt(col.transpose.dot(col)[0,0])
end

# 0.9999999701976772
# 1.0
# 1.0
</code></pre>

<p>Unfortunately, slice by reference isn't working on <code>HEAD</code>, or we could make a few additional improvements (see issue <a href="https://github.com/SciRuby/nmatrix/issues/51">#51</a>).</p>

<p>The other thing that I've wanted to do is to use <code>linspace</code> to generate points for plotting sines, cosines, etc. Here is an example:</p>

<pre><code>require 'nmatrix'

vector = NVector.linspace(0, Math::PI, 10)
vector.pretty_print

# 0.0
# 0.3490658503988659
# 0.6981317007977318
# 1.0471975511965976
# 1.3962634015954636
# 1.7453292519943295
# 2.0943951023931953
# 2.443460952792061
# 2.792526803190927
# 3.141592653589793

10.times do |i|
  vector[k, 0] = Math::sin(vector[k, 0])
end

vector.pretty_print

# 0.0
# 0.3420201433256687
# 0.6427876096865393
# 0.8660254037844386
# 0.984807753012208
# 0.984807753012208
# 0.8660254037844388
# 0.6427876096865395
# 0.3420201433256689
# 1.2246467991473532e-16
</code></pre>

<p>These results show a happy result, in that we are able to use NMatrix for simple tasks already. Of course, there are problems to be solved, e.g. slice by reference, inversion for all dtypes, eigenvalues. But it's going somewhere, it's growing.</p>

<p>I hope that by this time next year we'll have a very mature linear algebra library (and much more).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First NMatrix Alpha Released]]></title>
    <link href="http://sciruby.com/blog/2012/04/11/first-nmatrix-alpha-released/"/>
    <updated>2012-04-11T13:36:00+09:00</updated>
    <id>http://sciruby.com/blog/2012/04/11/first-nmatrix-alpha-released</id>
    <content type="html"><![CDATA[<p class="warning"><strong>Warning:</strong> Code in this blog post is very old and likely will not work with the current version of NMatrix. Please check the <a href="https://github.com/SciRuby/nmatrix/wiki/">NMatrix wiki</a> for the most recent information.</p>


<p>Two months ago, I <a href="2012/02/11/numeric-matrix-considerations">mentioned the existence of a prototype Ruby linear algebra library</a>, written in C.</p>

<p>I am pleased to announce that yesterday we released our first alpha of said library, <a href="/nmatrix/">NMatrix</a> v0.0.1.<!--more--></p>

<h2>Creating Matrices</h2>

<p>There are lots of different ways to create matrices. The first and easiest is to supply dimensions and initial data:</p>

<pre><code>>> n = NMatrix.new(4, 0) # a square 4x4 dense zero matrix
=> #&lt;NMatrix:0x9a57e14shape:[4,4] dtype:int32 stype:dense&gt;
>> n.pretty_print
0  0  0  0
0  0  0  0
0  0  0  0
0  0  0  0
=> nil
</code></pre>


<h2>Data Types</h2>

<p>You may notice that this first matrix defaulted to <tt>dtype=:int32</tt>. NMatrix will try to guess the <i>dtype</i> based on the
first initial value you provide (e.g., <tt>NMatrix.new(4, [0.0, 1])</tt> will be :float32), but you can choose to provide
a <i>dtype</i> in addition to or in lieu of initial values:</p>

<pre><code>>> n = NMatrix.new(4, [0,1], :rational128)
=> #&lt;NMatrix:0x9959e04shape:[4,4] dtype:rational128 stype:dense&gt;
>> n.pretty_print
0/1  1/1  0/1  1/1
0/1  1/1  0/1  1/1
0/1  1/1  0/1  1/1
0/1  1/1  0/1  1/1
>> m = NMatrix.new(4, :int64)  # no initialization of values
=> #&lt;NMatrix:0x99fad68shape:[4,4] dtype:int64 stype:dense&gt;
>> m.pretty_print
-1217641248  161386160  161386100  161385680
161385640  161385520  161385420  161384180
161384120  161381060  161381020  161412140
161411940  161411880  161411840  160879240
=> nil
</code></pre>


<h2>Storage Formats</h2>

<p>The storage type (<i>stype</i>) can also be specified, prior to the dimension argument. However, with sparse storage formats, initial values don't make sense, and these matrices will contain zeros by default.</p>

<pre><code># empty list-of-lists-of-lists 4x3x4 matrix
n = NMatrix.new(:list, [4,3,4], :int64)

# Ruby objects in a 'Yale' sparse matrix
m = NMatrix.new(:yale, [5,4], :object)

# A byte matrix containing a gradient
o = NMatrix.new(:dense, 5, [0,1,2,3,4], :byte)
</code></pre>


<p>The matrix <tt>m</tt> created above is a Yale-format sparse matrix, or more specifically, "new Yale," which differs from "old Yale" in that the diagonal is stored separately from the non-diagonal elements. Thus, diagonals can be accessed and set in constant time.</p>

<p>Currently, all storage is row-based.</p>

<h3>Conversion</h3>

<p>You can also convert between any of these three stypes using <tt>cast</tt>, e.g.,</p>

<pre><code>n = NMatrix.new(:list, 4, :int64)
n[0,0] = 5
n[0,3] = -2
dense = n.cast(:dense, :int64)
</code></pre>


<h2>Vectors</h2>

<p>Currently, only dense vectors are implemented as a child class of <tt>NMatrix</tt>, and creation is similar:</p>

<pre><code>>> nv = NVector.new(5, :int64)
=> #&lt;NVector:0x9a62328shape:[5,1] dtype:int64 stype:dense orientation:column&gt;
</code></pre>


<h2>Math Operations</h2>

<p>Most element-wise mathematical operations are supported for Yale and dense types. These use the basic operators (e.g., +, -, /, *, ==).</p>

<p>For non-element-wise matrix multiplication, use the <tt>dot</tt> instance method of NMatrix. Whole-matrix comparison (returning a single boolean value) is the <tt>equal?</tt> or <tt>eql?</tt> method.</p>

<h2>Road Map</h2>

<p>Much more remains to be written than has been completed. Here are some of our key priorities:</p>

<ul>
<li>determinants</li>
<li>matrix-vector multiplication for Yale</li>
<li>adaptation of SciRuby Matlab file reader to support NMatrix</li>
<li>in-place transposition</li>
</ul>


<p>If you want to get involved, I suggest visiting the <a href="https://github.com/sciruby/nmatrix/issues">NMatrix issue tracker</a>. It will contain not only bugs, but also features that need to be implemented.</p>

<h2>Conclusion</h2>

<p>We're all pretty excited about NMatrix. But we couldn't have gotten this far without Masahiro Tanaka's <a href="http://narray.rubyforge.org/">NArray</a>, which has served as a model for our library.</p>

<p>And we can't do it without your help. A numerical library in Ruby is no small endeavour, and probably requires at least one full-time programmer (which we do not have). Please consider contributing, even if it's just by letting us know what you think.</p>

<p>Happy coding!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Numeric Matrix Considerations]]></title>
    <link href="http://sciruby.com/blog/2012/02/11/numeric-matrix-considerations/"/>
    <updated>2012-02-11T17:35:00+09:00</updated>
    <id>http://sciruby.com/blog/2012/02/11/numeric-matrix-considerations</id>
    <content type="html"><![CDATA[<p>Maybe you've been wondering why the SciRuby people have been so quiet lately.</p>

<p>Mostly, we've been working on <a href="http://github.com/SciRuby/nmatrix">NMatrix</a>, which is our prototype linear algebra library, written as a Ruby C extension.<!--more--></p>

<p>So far, we have dense and linked-list-of-linked-lists (or just "list") matrices, which can exist in an essentially unlimited number of dimensions. This week, I implemented the <a href="https://github.com/SciRuby/nmatrix/blob/sparse/ext/nmatrix/yale.c">beginnings of a two-dimensional sparse type known as "new Yale."</a> If you're curious, check out <em><a href="http://apps.nrbook.com/c/index.html">Numerical Recipes in C</a></em>, pp. 78-79.</p>

<p>"New Yale" differs from "old Yale" (which SciPy uses for its CSR type) in that the diagonals are accessible in <tt>O(1)</tt> instead of <tt>O(log(n))</tt> time. Most libraries for Yale matrices include conditionals that permit both types to be used together (e.g., multiplying a new Yale matrix by an old Yale matrix).</p>

<p>As I worked through implementation of matrix multiplication for Yale, I realized that matrix libraries are a bottomless pit. One could probably write matrix algorithms forever and still have lots left to do.</p>

<p>So we need to set ourselves some limits.</p>

<p>It's not just whether the diagonal is extracted from the rest of the matrix. It's also whether you want to be able to multiply integer-valued matrices by real-valued matrices without an expensive copy operation. It's whether you want to be able to multiply dense against Yale matrices or two Yale and list matrices that have different dtypes, or have separate storage for symmetric matrices, and so on.</p>

<p>Some of this can be templated using generators. But the complexity begins to grow to the point where it's infeasible to test everything you've implemented. (You also start to get lost in a magical world of function pointers, which is yet another concern.)</p>

<p>So, again, we need to set ourselves some limits.</p>

<p>Where those limits might be, however, I know not. Weigh in on the Google Group, in the comments, or on <a href="https://plus.google.com/109304769076178160953/posts">our Google+ page</a>!</p>
]]></content>
  </entry>
  
</feed>
