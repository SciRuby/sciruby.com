<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: GSL | SciRuby]]></title>
  <link href="http://sciruby.com/blog/categories/gsl/atom.xml" rel="self"/>
  <link href="http://sciruby.com/"/>
  <updated>2017-10-23T20:55:53+09:00</updated>
  <id>http://sciruby.com/</id>
  <author>
    <name><![CDATA[SciRuby]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Updates: Minimization and Integration]]></title>
    <link href="http://sciruby.com/blog/2014/06/24/updates-minimization-and-integration/"/>
    <updated>2014-06-24T14:32:00+09:00</updated>
    <id>http://sciruby.com/blog/2014/06/24/updates-minimization-and-integration</id>
    <content type="html"><![CDATA[<h2>Minimization</h2>

<p>The Minimization gem now supports the following unidimensional function minimizations
provided by GSL. The supported methods include the pure Ruby implementations of:</p>

<ol>
<li>Newton&ndash;Raphson</li>
<li>Golden Section</li>
<li>Brent</li>
<li>Quad Golden</li>
</ol>


<p>Of these, the Golden Section, Brent, and Quad Golden are also
available via Minimization's GSL interface (and are thus
faster). Everything is organized in such a way that the faster C code
(i.e., GSL) will be executed when GSL is available, but that otherwise
the Ruby implementation will be used. I still have to beautify the
code and add documentation.</p>

<h2>Integration</h2>

<p>The Integration gem has been transitioned from Hoe to Bundler. For
Gauss&ndash;Kronrod Quadrature, I have hard-coded the values of nodes
and weights (for 15, 21, 31, 41, and 61 points) --- which were already
hardcoded in the case of the Gauss quadrature.</p>

<p>Additionally, I added basic methods like Simpson's Three-Eighths
Method, Milne's Method, Boole's Quadrature and Open Trapezoid.</p>

<p>This week, I will be reviewing a <a href="https://github.com/clbustos/integration/pull/3">pull request</a> which aims to change the structure of the whole Integration gem.</p>

<p>After that I plan to implement more adaptive methods and incorporate
the non-adaptive methods under a single Newton&ndash;Cotes function.</p>

<p>Lastly, I am brainstorming designs for symbolic integration using
JScience and JRuby.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to the Minimization and Integration project (Rajat)]]></title>
    <link href="http://sciruby.com/blog/2014/06/04/introduction-to-the-minimization-and-integration-project/"/>
    <updated>2014-06-04T14:23:00+09:00</updated>
    <id>http://sciruby.com/blog/2014/06/04/introduction-to-the-minimization-and-integration-project</id>
    <content type="html"><![CDATA[<p class="note"><strong>Editor's Note:</strong> We have two students
working on numerical minimization and integration this summer, Rajat and
Lahiru. Lahiru will be writing a separate post about his work.</p>


<h2>Introduction to the Minimization and Integration Project</h2>

<p>Hi. My name is Rajat Kapoor and I have been selected to work with
SciRuby for Google Summer of Code 2014.</p>

<p><a href="https://github.com/SciRuby/minimization">Minimization</a> and
<a href="https://github.com/SciRuby/integration">Integration</a> are two of the
many available gems in the SciRuby suite. My project this year aims to
improve these gems to replicate the functionality provided by GNU's
GSL. I will be trying to implement all the minimization and
integration algorithms present in GSL in pure Ruby, with improvements
as needed, so that these functions are easily accesible to all Ruby
users, while the users which have GSL already installed will have an
advantage in terms of speedy computations.</p>

<h2>What Minimization and Integration actually mean</h2>

<p>Minimization refers to the process of finding out the minimum of a
mathematical function whose values might depend on multiple
variables. Unidimensional minimization restricts these problems to
functions of one single variable. Integration is the same as the very
widely used concept in calculus which basically boils down to finding
the summation of the value of a function at small intervals, when the
width of the intervals in infinitesimally small. I can bet that you
knowingly or unknowingly use both these things on a daily basis.</p>

<h2>The plan</h2>

<p>The project can be broken into two major parts: Minimization and
Integration, as these are two seperate gems.</p>

<p>The Minimization gem can be broken in two parts: unidimensional (or
univariate) and multidimensional (multivariate). With respect to
coding, these two can again be broken down into sub-parts: pure Ruby
implementations and GSL support. The Integration gem will include
the pure Ruby implementations as well as GSL support. Along with this,
some support for symbolic integration will be added for JRuby
users by way of the JScience library.</p>

<h2>Progress</h2>

<p>The pure Ruby implementations of the unidimensional minimization part
are almost finished. I am also working on the GSL support for the same
along with it. I plan to finish up any unidimensional minimization
work by the end of this week and start the work with multidimensional
minimization methods.</p>

<p>Keep watching this blog for more updates regarding my project.</p>
]]></content>
  </entry>
  
</feed>
