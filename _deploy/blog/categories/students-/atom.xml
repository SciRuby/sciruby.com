<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Students, | SciRuby]]></title>
  <link href="http://sciruby.com/blog/categories/students-/atom.xml" rel="self"/>
  <link href="http://sciruby.com/"/>
  <updated>2017-10-23T20:55:53+09:00</updated>
  <id>http://sciruby.com/</id>
  <author>
    <name><![CDATA[SciRuby]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GSoC 2016: SpiceRub::KernelPool and Kernels]]></title>
    <link href="http://sciruby.com/blog/2016/11/25/spicerub-kernelpool-and-kernels/"/>
    <updated>2016-11-25T02:32:35+09:00</updated>
    <id>http://sciruby.com/blog/2016/11/25/spicerub-kernelpool-and-kernels</id>
    <content type="html"><![CDATA[<p>So this post comes rather late, but I'd still like to talk about what I did in the first week, and a little into the second week.
Firstly, thanks to a pull request offered by my GSoC mentor John (<a href="https://github.com/mohawkjohn">@mohawkjohn</a>), I now have rake tasks set up properly in the repository and rake seems to be working.</p>

<p>There are installation instructions in the <a href="https://github.com/sciruby/spice_rub/blob/master/README.rdoc">readme</a> and there are already some sample Kernel files in
the spec folder to try out various routines on. Apart from cloning the repository, one additional thing you will need to do is <a href="https://naif.jpl.nasa.gov/naif/toolkit_C.html">download the SPICE toolkit</a>. You may want to keep the entire compressed file for later, but you'll only need the <code>cspice.a</code> file in the <code>lib/</code> subdirectory. After this follow the instructions in the <a href="https://github.com/sciruby/spice_rub/blob/master/README.rdoc">readme</a> and you should be good to go. (Be sure to run <code>bundle install</code> to install any dependencies that you don't already have.)</p>

<p>After you're done compiling and installing, run <code>rake pry</code> in the gem root directory.</p>

<p>If you remember, almost any useful task involving the SPICE Toolkit is preceded by loading data through kernel files. The relevant routine to do this is called <code>furnsh_c()</code> , and the most direct way to access it through Ruby is by calling the function <code>SpiceRub::Native.furnsh</code>. (However, this is not recommended because SpiceRub has a specific Ruby class unifying all the kernel related methods, and also because SPICE maintains its own internal variables for both tracking loaded kernel files and unloading them.)</p>

<p>Below is a crude dependency sequence:</p>

<p>```ruby
SpiceRub::KernelPool.load ->  SpiceRub::Native.furnsh -> furnsh_c</p>

<p>Ruby Interface            ->  C Accessor              -> External library</p>

<p>Ruby                      ->  Native Ruby-C API       -> Native 3rd Party C
```</p>

<p>That's the basic design of the wrapper, so here are a few simple examples on using the Kernel API. <code>=&gt;</code> denotes the interpreted output of pry.</p>

<p>First of all, the main KernelPool class is a singleton class, that means it can only be instantiated with the <code>#instance</code> method and the usual <code>#new</code> is private.
Any subsequent calls to <code>#instance</code> will produce the same object.</p>

<p>```ruby
kernel_pool = SpiceRub::KernelPool.instance
=> #&lt;SpiceRub::KernelPool:0x00000002db3218></p>

<p>rogue_kernel_pool = SpiceRub::KernelPool.new
NoMethodError: private method <code>new' called for SpiceRub::KernelPool:Class
from (pry):2:in</code><strong>pry</strong>'</p>

<p>rogue_kernel_pool = SpiceRub::KernelPool.instance
=> #&lt;SpiceRub::KernelPool:0x00000002db3218></p>

<p>rogue_kernel_pool == kernel_pool
=> true
```</p>

<p>This is to make sure there is only one KernelPool state being maintained at a time. Now we have a bunch of kernel files in the <code>spec/data/kernels</code> folder which we'll use for this example. There is an accessor attribute called <code>@path</code> which can be used to point to a particular folder.</p>

<p><code>ruby
kernel_pool.path = 'spec/data/kernels'
</code></p>

<p>From here on it's required that you're running pry or irb from the gem root folder in order for the paths to match in these examples.</p>

<p>Now let's load a couple of kernel files, you can type <code>system("ls", kernel_pool.path)</code> into your console to get a list of all the test kernels available in that folder. The KernelPool object has a <code>#load</code> method to load kernel files. If the variable path is set, then you only need to enter the file name, otherwise the entire path needs to be provided. An integer denoting the index of the kernel in the pool is returned if the load is successful.</p>

<p><code>ruby
kernel_pool.load("naif0011.tls")
=&gt; 0
</code></p>

<p>Note that this is the same as providing the full relative path of <code>spec/data/kernels/naif0011.tls</code> when the <code>path</code>  variable is not set or nil.</p>

<p>Let's load two more files:-</p>

<p>```ruby
kernel_pool.load("moon_pa_de421_1900-2050.bpc")
=> 1</p>

<p>kernel_pool.load("de405_1960_2020.bsp")
=> 2</p>

<p>kernel_pool
=> #&lt;SpiceRub::KernelPool:0x00000002db3218
 @path="spec/data/kernels",
 @pool=
  [#&lt;SpiceRub::KernelPool::SpiceKernel:0x0000000270fab0 @loaded=true, @path_to="spec/data/kernels/naif0011.tls">,
   #&lt;SpiceRub::KernelPool::SpiceKernel:0x000000026bd698 @loaded=true, @path_to="spec/data/kernels/moon_pa_de421_1900-2050.bpc">,
   #&lt;SpiceRub::KernelPool::SpiceKernel:0x000000024ce698 @loaded=true, @path_to="spec/data/kernels/de405_1960_2020.bsp">]></p>

<p>```</p>

<p>So now if you try to view the <code>@pool</code> member of <code>kernel_pool</code>, you'll find three SpiceKernel objects with <code>@loaded=true</code> and their respective file paths.
There isn't much to do with a <code>SpiceKernel</code> object except unload it, or check its state. Note that you can only load kernel files into a <code>KernelPool</code> object and unload them via the <code>SpiceKernel</code> object.</p>

<p>You can access the kernel pool by calling the <code>#[]</code> operator and using the index that was returned on load:</p>

<p>```ruby
kernel_pool[0]
=> #&lt;SpiceRub::KernelPool::SpiceKernel:0x0000000270fab0 @loaded=true, @path_to="spec/data/kernels/naif0011.tls"></p>

<p>kernel_pool.count
=> 3</p>

<p>kernel_pool[0].unload!
=> true</p>

<p>kernel_pool.count
=> 2</p>

<p>```</p>

<p>So here we unload the first kernel and note that the count drops to 2. If you look up <code>kernel_pool[0]</code>, you'll find that the kernel is still present &mdash; but its <code>@loaded</code> variable has been set to false, which means that it has been removed from the CSPICE internal kernel pool.</p>

<p><code>ruby
kernel_pool[0]
=&gt; #&lt;SpiceRub::KernelPool::SpiceKernel:0x0000000270fab0 @loaded=false, @path_to="spec/data/kernels/naif0011.tls"&gt;
</code></p>

<p>To unload all kernels simultaneously and delete the kernel pool, use <code>#clear!</code></p>

<p>```ruby</p>

<p>kernel_pool.clear!
=> true</p>

<p>kernel_pool.empty?
=> true</p>

<p>kernel_pool.pool
=> []
```</p>

<p>And that about wraps up this blog post on basic kernel handling. Since we know how to load data but not use it yet, I'll cover that and the various kernel types in the next blog post. Thank you for reading.</p>
]]></content>
  </entry>
  
</feed>
