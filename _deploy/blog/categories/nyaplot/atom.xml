<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Nyaplot | SciRuby]]></title>
  <link href="http://sciruby.com/blog/categories/nyaplot/atom.xml" rel="self"/>
  <link href="http://sciruby.com/"/>
  <updated>2017-10-23T20:55:53+09:00</updated>
  <id>http://sciruby.com/</id>
  <author>
    <name><![CDATA[SciRuby]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GSoC 2016: Adding Categorical Data Support]]></title>
    <link href="http://sciruby.com/blog/2016/11/25/gsoc-2016-adding-categorical-data-support/"/>
    <updated>2016-11-25T02:54:00+09:00</updated>
    <id>http://sciruby.com/blog/2016/11/25/gsoc-2016-adding-categorical-data-support</id>
    <content type="html"><![CDATA[<p>Support for categorical data is important for any data analysis
tool. This summer I implemented categorical data capabilities for:</p>

<ul>
<li>Convenient and efficient data wrangling for categorical data in <a href="https://github.com/v0dro/daru">Daru</a></li>
<li>Visualization of categorical data</li>
<li>Multiple linear regression and generalized linear models (GLM) with categorical variables in <a href="https://github.com/SciRuby/statsample">Statsample</a> and <a href="https://github.com/SciRuby/statsample-glm">Statsample-GLM</a></li>
</ul>


<p>Lets talk about each of them in detail.</p>

<h4>Analyzing catgorical data with Daru</h4>

<p>Categorical data is now readily recognized by
<a href="https://github.com/v0dro/daru">Daru</a> and Daru has all the necessary
procedures for dealing with it.</p>

<p>To analyze categorical variable, simply turn the numerical vector to categorical and you are ready to go.</p>

<p>We will use, for demonstration purposes, animal shelter data taken
from the <a href="https://www.kaggle.com/c/shelter-animal-outcomes">Kaggle Competition</a>. It is
stored in <code>shelter_data</code>.</p>

<p><img src="http://i65.tinypic.com/xeliqs.png" alt="" /></p>

<p>```ruby</p>

<h1>Tell Daru which variables are categorical</h1>

<p>shelter_data.to_category 'OutcomeType', 'AnimalType', 'SexuponOutcome', 'Breed', 'Color'</p>

<h1>Or quantize a numerical variable to categorical</h1>

<p>shelter_data['AgeuponOutcome'] = shelter_data['AgeuponOutcome(Weeks)'].cut [0, 1, 4, 52, 260, 1500],</p>

<pre><code>labels: [:less_than_week, :less_than_month, :less_than_year, :one_to_five_years, :more_than__five_years]
</code></pre>

<h1>Do your operations on categorical data</h1>

<p>shelter_data['AgeuponOutcome'].frequencies.sort ascending: false
```
<img src="http://i67.tinypic.com/w1u3vs.png" alt="" /></p>

<p>```ruby
small['Breed'].categories.size</p>

<h1>=> 1380</h1>

<h1>Merge infrequent categories to make data analysis easy</h1>

<p>other_cats = shelter_data['Breed'].categories.select { |i| shelter_data['Breed'].count(i) &lt; 10 }
other_cats_hash = other_cats.zip(['other']*other_cats.size).to_h
shelter_data['Breed'].rename_categories other_cats_hash
shelter_data['Breed'].frequencies</p>

<h1>View the data</h1>

<p>small['Breed'].frequencies.sort(ascending: false).head(10)
```
<img src="http://i64.tinypic.com/25rcu8m.png" alt="" /></p>

<p>Please refer to <a href="http://lokeshh.github.io/blog/2016/06/21/categorical-data/">this blog post</a> to know more.</p>

<h4>Visualizing categorical data</h4>

<p>With the help of <a href="https://github.com/SciRuby/nyaplot">Nyaplot</a>, <a href="https://github.com/SciRuby/gnuplotrb">GnuplotRB</a> and <a href="https://github.com/topfunky/gruff">Gruff</a>, Daru now provides ability to visualize categorical data as it does with numerical data.</p>

<p>To plot a vector with Nyaplot one needs to call the function <code>#plot</code>.</p>

<p>```ruby</p>

<h1>dv is a caetgorical vector</h1>

<p>dv = Daru::Vector.new ['III']<em>10 + ['II']</em>5 + ['I']*5, type: :category, categories: ['I', 'II', 'III']</p>

<p>dv.plot(type: :bar, method: :fraction) do |p, d|
  p.x_label 'Categories'
  p.y_label 'Fraction'
end
```</p>

<p><img src="http://i64.tinypic.com/2s6onsw.png" alt="" /></p>

<p>Given a dataframe, one can plot the scatter plot such that the points
color, shape and size can be varied acording to a categorical
variable.</p>

<p>```ruby</p>

<h1>df is a dataframe with categorical variable :c</h1>

<p>df = Daru::DataFrame.new({
  a: [1, 2, 4, -2, 5, 23, 0],
  b: [3, 1, 3, -6, 2, 1, 0],
  c: ['I', 'II', 'I', 'III', 'I', 'III', 'II']
  })
df.to_category :c</p>

<p>df.plot(type: :scatter, x: :a, y: :b, categorized: {by: :c, method: :color}) do |p, d|
  p.xrange [-10, 10]
  p.yrange [-10, 10]
end
```</p>

<p><img src="http://i64.tinypic.com/2mcfx28.png" alt="" /></p>

<p>In a similar manner Gnuplot and Gruff also support plotting of categorical variables.</p>

<p>An additional work I did was to add Gruff with Daru. Now one can plot
vectors and dataframes also using Gruff.</p>

<p>See more notebooks on visualizing categorical data with Daru
<a href="http://nbviewer.jupyter.org/github/SciRuby/sciruby-notebooks/tree/master/Data%20Analysis/Plotting/">here</a>.</p>

<h4>Regression with categorical data</h4>

<p>Now categorical data is supported in multiple linear regression and
generalized linear models (GLM) in
<a href="https://github.com/SciRuby/statsample">Statsample</a> and
<a href="https://github.com/SciRuby/statsample-glm">Statsample-GLM</a>.</p>

<p>A new formula language (like that used in R or
<a href="https://github.com/pydata/patsy">Patsy</a>) has been introduced to ease
the task of specifying regressions.</p>

<p>Now there's no need to manually create a dataframe for regression.</p>

<p>```ruby
require 'statsample-glm'</p>

<p>formula = 'OutcomeType_Adoption~AnimalType+Breed+AgeuponOutcome(Weeks)+Color+SexuponOutcome'
glm_adoption = Statsample::GLM::Regression.new formula, train, :logistic
glm_adoption.model.coefficients :hash</p>

<h1>=> {:AnimalType_Cat=>0.8376443692275163, :"Breed_Pit Bull Mix"=>0.28200753488859803, :"Breed_German Shepherd Mix"=>1.0518504638731023, :"Breed_Chihuahua Shorthair Mix"=>1.1960242033878856, :"Breed_Labrador Retriever Mix"=>0.445803000000512, :"Breed_Domestic Longhair Mix"=>1.898703165797653, :"Breed_Siamese Mix"=>1.5248210169271197, :"Breed_Domestic Medium Hair Mix"=>-0.19504965010288533, :Breed_other=>0.7895601504638325, :"Color_Blue/White"=>0.3748263925801828, :Color_Tan=>0.11356334165122918, :"Color_Black/Tan"=>-2.6507089126322114, :"Color_Blue Tabby"=>0.5234717706465536, :"Color_Brown Tabby"=>0.9046099720184905, :Color_White=>0.07739310267363662, :Color_Black=>0.859906249787038, :Color_Brown=>-0.003740755055106689, :"Color_Orange Tabby/White"=>0.2336674067343927, :"Color_Black/White"=>0.22564205490196415, :"Color_Brown Brindle/White"=>-0.6744314269278774, :"Color_Orange Tabby"=>2.063785952843677, :"Color_Chocolate/White"=>0.6417921901449108, :Color_Blue=>-2.1969040091451704, :Color_Calico=>-0.08386525532631824, :"Color_Brown/Black"=>0.35936722899161305, :Color_Tricolor=>-0.11440457799048752, :"Color_White/Black"=>-2.3593561796090383, :Color_Tortie=>-0.4325130799770577, :"Color_Tan/White"=>0.09637439333330515, :"Color_Brown Tabby/White"=>0.12304448360566177, :"Color_White/Brown"=>0.5867441296328475, :Color_other=>0.08821407092892847, :"SexuponOutcome_Spayed Female"=>0.32626712478395975, :"SexuponOutcome_Intact Male"=>-3.971505056680895, :"SexuponOutcome_Intact Female"=>-3.619095491410668, :SexuponOutcome_Unknown=>-102.73807712615843, :"AgeuponOutcome(Weeks)"=>-0.006959545305620043}</h1>

<p>```</p>

<p>Additionally, through the work of <a href="https://github.com/agisga">Alexej Grossmann</a>,
one can also predict on new data using the model.</p>

<p><code>ruby
predict = glm_adoption.predict test
predict.map! { |i| i &lt; 0.5 ? 0 : 1 }
predict.head 5
</code>
<img src="http://i67.tinypic.com/r1af7p.png" alt="" /></p>

<p>This, I believe, makes Statsample-GLM very convenient to use.</p>

<p>See <a href="http://nbviewer.jupyter.org/github/SciRuby/sciruby-notebooks/blob/master/Data%20Analysis/Categorical%20Data/examples/%5BExample%5D%20Formula%20language%20in%20Statsample-GLM.ipynb">this</a> for a complete example.</p>

<h4>Other</h4>

<p>In addition to the aforementioned, there are some other considerable changes:</p>

<ul>
<li>Improving overall structure of indexing in Daru and adding more capabilities. See <a href="http://nbviewer.jupyter.org/github/SciRuby/sciruby-notebooks/blob/master/Data%20Analysis/Categorical%20Data/Indexing%20in%20Vector.ipynb">this</a> and <a href="http://nbviewer.jupyter.org/github/SciRuby/sciruby-notebooks/blob/master/Data%20Analysis/Categorical%20Data/Indexing%20in%20DataFrame.ipynb">this</a>.</li>
<li><code>CategoricalIndex</code> to handle the case when index column is a categorical data. <a href="http://lokeshh.github.io/blog/2016/06/14/categorical-index/">More about it here.</a></li>
<li>Improving missing value API in Daru. <a href="http://lokeshh.github.io/blog/2016/08/18/improve-missing-values-api-in-daru/">Read more about it here.</a></li>
<li>Configuring guard to enable automatic testing. <a href="https://github.com/v0dro/daru/blob/master/CONTRIBUTING.md#testing">More info here.</a></li>
</ul>


<h4>Documentation</h4>

<p><a href="http://lokeshh.github.io/blog/2016/06/21/categorical-data/">You can read about all my work in detail here.</a>. <a href="https://summerofcode.withgoogle.com/archive/2016/projects/5356167010189312/">Additionally, my project page can be found here.</a></p>

<p>I hope with these additions one will be able to see data more clearly with Daru.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nyaplot: interactive plots generator with Ruby]]></title>
    <link href="http://sciruby.com/blog/2014/08/23/nyaplot-interactive-plots-generateor-with-ruby/"/>
    <updated>2014-08-23T10:07:00+09:00</updated>
    <id>http://sciruby.com/blog/2014/08/23/nyaplot-interactive-plots-generateor-with-ruby</id>
    <content type="html"><![CDATA[<iframe width="853" height="480" src="http://sciruby.com//www.youtube.com/embed/ZxjqsIluM88" frameborder="0" allowfullscreen></iframe>


<h2>Introduction</h2>

<p>Three months of GSoC 2014 term was over this week and finally I
released my product <a href="http://rubygems.org/gems/nyaplot">Nyaplot as a gem</a>.
This blog post was written to introduce Nyaplot version 0.1.1.</p>

<h2>Features</h2>

<p>There are various plotting libraries in the world as ggplot2 from R
community and <a href="https://github.com/zuhao/plotrb">Plotrb</a> and
<a href="https://github.com/clbustos/rubyvis">Rubyvis</a> from Ruby.  The
features of Nyaplot compared with those libraries are
<strong>interactivity</strong>, <strong>simplicity</strong>, and <strong>extensibility</strong>.</p>

<p>Interactivity is the main theme of my D3 project in GSoC 2014. You can
soon find the aforementioned interactivity by clicking plots with your
mouse or trackpad. This feature is also available on browsers bundled
with Android or iOS thanks to technologies like SVG and WebGL.</p>

<p>However, the word 'interactivity' is not limited to situations like
the above. You can explore that for yourself by using Nyaplot in <a href="https://github.com/minad/iruby">IRuby notebook</a>. Various
modules prepared
by Nyaplot help you to create plots interactively in the notebook.
You can also publish the result quickly by uploading the notebook to
your Dropbox storage, a gist or pastebin, or somewhere else. <a href="http://nbviewer.ipython.org/gist/mgiraldo/a68b53175ce5892531bc">Here is an example</a>
which Mauricio Giraldo created and published on gist.</p>

<p>Simplicity is also an important element.  Many plotting libraries has
MATLAB-like function-based API but Nyaplot does not.  Nyaplot is
designed in a more Ruby-like object-oriented style, and its plots
consist of various objects created from different classes. But Nyaplot
has simple shortcut methods and users may avoid the more complex API.</p>

<p><img src="https://dl.dropboxusercontent.com/u/47978121/gsoc/extensions_for_blog_post.png" alt="Extension libraries" /></p>

<p>Nyaplot can be easily and dramatically extended with some JavaScript
code. It bundles 3 extension libraries in its gem package: Nyaplot3D
for 3D plots, Mapnya for map visualization, and Bionya for circular
plots inspired by circos. Their structure is very simple and you can
write the extension easily if you have a little experience in
JavaScript and Ruby. For example, the Ruby part of Bionya has only
about a hundred lines, even though the graphic's style is far from
that of standard plots.</p>

<h2>Quick start</h2>

<p>You can install Nyaplot by simply running <code>gem install nyaplot</code>.
After that, find example code from
<code>path_to_gems/nyaplot-0.1.1/examples/rb</code> and run some of them using
<code>ruby</code> command.  These scripts will generate some plots with Nyaplot
and export them as html files to current directory.</p>

<p>In addition, I strongly recommend you to install <a href="https://github.com/minad/iruby">IRuby notebook</a> at
the same time. IRuby is a
web-based, interactive Ruby environment and is useful for quickly
creating plots with Nyaplot. The introduction video embedded at the
top of this post was also created on IRuby.</p>

<p>IRuby depends on some software outside of Ruby-ecosystem, so its
installation method is a bit complicated. Please read <a href="https://github.com/domitry/nyaplot#install-iruby-notebook">the description in the readme</a>
to learn more.</p>

<h2>Usage</h2>

<p>I already wrote tutorials, so I'd like to limit the role of this
paragraph to the introduction of the basic usage. You can skip
reading this paragraph and find details in <a href="http://nbviewer.ipython.org/github/domitry/nyaplot/blob/master/examples/notebook/Index.ipynb">the nbviewer tutorial</a>
and <a href="http://rubydoc.info/gems/nyaplot/0.1.1/frames">documentation</a>.</p>

<p>The minimum code to create a scatter plot is as shown below:</p>

<p><code>ruby
plot = Nyaplot::Plot.new
sc = plot.add(:scatter, [0,1,2,3,4], [-1,2,-3,4,-5])
</code></p>

<p><code>Nyaplot::Plot</code> is the base class to create plots and
<code>Nyaplot::Plot#add</code> is the method to add diagram to its instance.  The
first argument is to specify the type of diagram, and the second and
third are for data mapped into <em>x</em> and <em>y</em> axes.  <code>Plot#add</code> returns an
instance of <code>Nyaplot::Diagram</code> and you can change attributes like
color and stroke of each diagram component.</p>

<p>For example you can change its color by running the code below.
<code>ruby
color = Nyaplot::Colors.qual
sc.color(color)
</code></p>

<p><code>Nyaplot::Colors</code> is the simple wrapper for
<a href="http://colorbrewer2.org">Colorbrewer</a>, and one of its methods
<code>Nyaplot::Colors.qual</code> randomly returns colorset suitable for
qualitative data.</p>

<p>If you execute this code in IRuby notebook, you can check if you favor
the colorset through html-table based interface. <a href="http://nbviewer.ipython.org/github/domitry/nyaplot/blob/master/examples/notebook/Colors.ipynb">See the tutorial to learn more.</a></p>

<p><img src="https://dl.dropboxusercontent.com/u/47978121/gsoc/colors.png" alt="Nyaplot::Colors" /></p>

<p>The plot generated from the code can be exported with two lines below.</p>

<p><code>ruby
plot.show # show plot on IRuby notebook
plot.export_html # export plot to the current directory as a html file
</code></p>

<p>We cannot explain Nyaplot without <code>Nyaplot::DataFrame</code>. Example code
above does not contain the word 'DataFrame', but the software
internally create an instance of <code>Nyaplot:DataFrame</code> and creates plots
based on it.</p>

<p>To create the same scatter plot as above, run the code below.</p>

<p><code>ruby
df = Nyaplot::DataFrame.new({a: [0,1,2,3,4], b: [-1,2,-3,4,-5]})
plot.add_with_df(df, :scatter, :a, :b)
</code></p>

<p>You may not feel any advantage of using <code>Plot#add_with_df</code> instead of <code>Plot#add</code>, but the former is useful when creating more complicated plots. <a href="http://nbviewer.ipython.org/github/domitry/Nyaplot/blob/master/examples/notebook/Interaction_with_DataFrame.ipynb">Have a look at the tutorial to learn more.</a></p>

<h2>Conclusion</h2>

<p>My GSoC term has concluded, but that do not mean the end of
development.  There are still many things to do for improvement of
this project.  For example Mapnya and Bionya are both experimental
implementation, and the functionality of Nyaplot::DataFrame is
relatively limited.  If you are interested in this project, please
fork either or both of the two repositories below and send me
pull-requests.</p>

<ul>
<li><a href="https://github.com/domitry/nyaplot">Nyaplot on GitHub</a></li>
<li><a href="https://github.com/domitry/Nyaplotjs">Nyaplotjs on GitHub</a></li>
</ul>


<p>Any form of contribution is welcome.</p>

<p>At last I'd like to express my gratitude to my mentor Pjotr Prins and
other members of SciRuby community.  I would not have been able to
finish my GSoC term without great help from them.  Feedback from
people outside of the community also helped me a lot.  I had a great
summer thanks to all people related to this project.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Nyaplot internal event handler]]></title>
    <link href="http://sciruby.com/blog/2014/07/09/nyaplot-internal-event-handler/"/>
    <updated>2014-07-09T17:01:00+09:00</updated>
    <id>http://sciruby.com/blog/2014/07/09/nyaplot-internal-event-handler</id>
    <content type="html"><![CDATA[<p><img src="https://dl.dropboxusercontent.com/u/47978121/gsoc/multiple_panes.png" alt="Nyaplot multi-pane example" /></p>

<h2>Introduction</h2>

<p>Last week I implemented the multiple panes interactivity to the
front-end of Nyaplot. You can see the demo on <a href="http://nbviewer.ipython.org/github/domitry/Nyaplot/blob/master/examples/notebook/Introduction.ipynb">this notebook</a>.</p>

<p>Skip over single pane demo, and have a look at the paragraph 'Multiple
panes demo' at the bottom. In this example, the histogram and bar chart are
created individually, and then thrown into one instance of
Nyaplot::Frame. After running <code>frame.show</code>, both of the diagrams
appear in one out-put box on the notebook. When you click the
histogram, bar chart refrects that and change its height.</p>

<p>In this article I will explain about the event handler of Nyaplot,
which allows for interactivity among panes.</p>

<h2>The Trick</h2>

<p>The trick is actually hidden in Nyaplot::DataFrame. In this example,
both of the two diagrams are generated from columns in one DataFrame.
When Nyaplot receives a column object (instance of <code>Nyaplot::Series</code>,
defined
<a href="https://github.com/domitry/nyaplot/blob/93ee183b935a7deafa388f2a198792e86914d550/lib/nyaplot/data.rb#L130">here</a>), it
internally find its source data frame and remembers its location.</p>

<p>Consequently, Nyaplot can find that histogram and bar chart are
sharing their data source, and allows them to interact with each other.</p>

<p><img src="https://dl.dropboxusercontent.com/u/47978121/gsoc/table.png" alt="Nyaplot::DataFrame Example" /></p>

<h2>Implementation</h2>

<p>Before explaining the event handler, I want to outline Nyaplot's
diagram rendering procedure. In the back-end JavaScript library,
diagrams, such as histograms, fetch column data from data frames and generate
their SVG DOM nodes dynamically (<a href="https://github.com/domitry/Nyaplotjs/blob/0aa104aed467f39da89ba3ed72be5f159a0261b8/src/view/diagrams/histogram.js#L20">source code</a>).</p>

<p>The key is <a href="https://github.com/domitry/Nyaplotjs/blob/0aa104aed467f39da89ba3ed72be5f159a0261b8/src/utils/dataframe.js">a data frame written in JavaScript</a>. After mouse events
coming from a filter (such as the gray box on the plot area) are
handled, the histogram <a href="https://github.com/domitry/Nyaplotjs/blob/0aa104aed467f39da89ba3ed72be5f159a0261b8/src/view/diagrams/histogram.js#L96">registers its filter function to the data frame and instructs all diagrams to update their SVG DOM objects</a>. The bar chart <a href="https://github.com/domitry/Nyaplotjs/blob/0aa104aed467f39da89ba3ed72be5f159a0261b8/src/view/diagrams/bar.js#L54">updates its SVG from data filtered by the new function</a>.</p>

<p>As you can see, Nyaplot's inner workings are fairly simple; and these
workings are common to all diagrams supported by Nyaplot. So not only
the histogram and bar chart, but other diagrams as well, can behave
interactively (e.g., <a href="http://www.domitry.com/gsoc/multi_pane2.html">histogram, bar, and Venn example</a>).</p>

<h2>Conclusion</h2>

<p>Despite, or perhaps because of, the relative simplicity of the
structure, the event handler functions well. The actual interactivity
in Nyaplot is based on the data frame object, both in the
Ruby front-end and the JavaScript back-end. As a result, handling
events in DataFrame is both natural and efficient for Nyaplot.</p>

<h2>Additional Information</h2>

<p>Nyaplot and its back-end library Nyaplotjs are being developed on GitHub.</p>

<ul>
<li><a href="https://github.com/domitry/nyaplot">Nyaplot on GitHub</a></li>
<li><a href="https://github.com/domitry/Nyaplotjs">Nyaplotjs on GitHub</a></li>
</ul>


<p>If you are interesed, feel free to try it and raise issues or send pull-requests.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The progress of the GSoC D3/Visualization Project]]></title>
    <link href="http://sciruby.com/blog/2014/07/02/progress-of-d3-project/"/>
    <updated>2014-07-02T17:09:00+09:00</updated>
    <id>http://sciruby.com/blog/2014/07/02/progress-of-d3-project</id>
    <content type="html"><![CDATA[<p>This week is the half-way point of this year's Google Summer of
Code. Let me report the progress during the term.</p>

<p><img src="https://dl.dropboxusercontent.com/u/47978121/gsoc/nyaoplot_top.png" alt="Example Nyaplot chart of a spiral" /></p>

<h2>Progress on the front-end library</h2>

<p>I am developing <a href="https://github.com/domitry/Nyaplot">Nyaplot</a> as the front-end library
for my work.</p>

<p>One topic on Nyaplot is API design. That is a difficult problem since
each plotting library has very different methods for creating
plots. For example, matplotlib and Bokeh are both written in Python,
but their demo code is written in very different styles. After
discussing with my mentor, I decided to implement the function-based
API.</p>

<p>As an exmaple of that API, here is a minimal working example for
generating bar charts with Nyaplot:</p>

<p><code>ruby
require 'nyaplot'
plot = Nyaplot::Plot.new
plot.add(:bar, ['nya1', 'nya2', 'nya3'],[10,20,30])
plot.show
</code></p>

<p>If you want to change options (<em>e.g.</em>, color or title), put the return
value of <code>Nyaplot::Plot.add</code> into a variable and call its methods.</p>

<p><code>ruby
bar = plot.add(:bar, ['nya1', 'nya2', 'nya3'],[10,20,30])
bar.title("the number of cats") # name the bar chart
</code></p>

<h2>IRuby integration</h2>

<p>Interaction with <a href="https://github.com/minad/iruby">IRuby</a> is a priority
for Nyaplot. IRuby is a web-based Ruby lab notebook-like environment,
based on IPython, which is also useful for fast prototyping.</p>

<p>The image at the top of this blog post is a hyperbolic spiral which I
generated with Nyaplot in IRuby. <a href="http://nbviewer.ipython.org/github/domitry/Nyaplot/blob/master/examples/notebook/Introduction.ipynb">Have a look at the
notebook</a>
on nbviewer, an IRuby and IPython notebook hosting services.</p>

<h2>Progress on the back-end library</h2>

<p>Nyaplot uses <a href="https://github.com/domitry/Nyaplotjs">Nyaplotjs</a> as its
back-end library. I spent a lot of time working to implement
interactivity among multiple panes to Nyaplotjs. <a href="http://www.domitry.com/gsoc/multi_pane2.html">See an
example here.</a></p>

<p><img src="https://dl.dropboxusercontent.com/u/47978121/gsoc/top.png" alt="Three-pane interactivity screenshot" /></p>

<p>The input data source is a TSV file of 2,044 lines. Multiple-pane
interactivity is especially important when visualizing such a large
dataset.</p>

<p>Have a look at the radio buttons beside the Venn diagram. The left
three panels decide which set to put into each of three circles
(VENN1, VENN2, VENN3). The right panel decides which data in each area
(overlapping area, non-overlapping area, and all) to use in the other
two panes.</p>

<p>The gray box on the histogram decides the range of PNR values. If you
select the range 0.3 to 0.7 with it, the right bar chart will reflect
that and show how many of the selected data are in that range.</p>

<p>Nyaplotjs provides this interactivity using an event handler connected
to a dataframe object. That allows us to handle unidirectional update
method (<em>e.g.</em>, histogram updates bar chart, but bar chart does not
update histogram).</p>

<h2>Conclusion</h2>

<p>I finished the first half term of Google Summer of Code 2014, but I
still have a lot of things to do. I would like to continue to add
interactivity to both the front-end and back-end libraries.</p>

<p>I am developing those two libraries in separate repositories on
GitHub. If you are interested, feel free to raise issues or send
pull-requests, even during the GSoC term.</p>

<ul>
<li><a href="https://github.com/domitry/Nyaplot">Nyaplot - GitHub</a></li>
<li><a href="https://github.com/domitry/Nyaplotjs">Nyaplotjs - GitHub</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
