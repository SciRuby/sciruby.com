<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Students | SciRuby]]></title>
  <link href="http://sciruby.com/blog/categories/students/atom.xml" rel="self"/>
  <link href="http://sciruby.com/"/>
  <updated>2017-10-23T20:55:53+09:00</updated>
  <id>http://sciruby.com/</id>
  <author>
    <name><![CDATA[SciRuby]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GSoC 2017 : Data visualization using daru-view]]></title>
    <link href="http://sciruby.com/blog/2017/09/01/gsoc-2017-data-visualization-using-daru-view/"/>
    <updated>2017-09-01T22:46:00+09:00</updated>
    <id>http://sciruby.com/blog/2017/09/01/gsoc-2017-data-visualization-using-daru-view</id>
    <content type="html"><![CDATA[<p>Hello, Rubyist! Are looking for good ruby gem for interactive data
visualization? Then you must try <a href="https://github.com/Shekharrajak/daru-view"><code>daru-view</code></a>, a plugin gem for <a href="https://github.com/SciRuby/daru"><code>daru</code></a>.</p>

<h2>What makes daru-view different ?</h2>

<ul>
<li><p><code>daru-view</code> is designed for interactive plotting of charts and tables.It
provide different plotting tools like Nyaplot, HighCharts, GoogleCharts,
DataTable. So you don't have to write any JavaScript code from these sites
and no need to shift to other language to get charts.</p></li>
<li><p>It can work with <strong>any ruby web application framework like Rails/Sinatra/Nanoc/Hanami</strong>. If you want to try few examples then please look into the
<a href="https://github.com/Shekharrajak/daru-view/tree/master/spec"><code>daru-view/spec/dummy_*</code></a> examples of Rails, Sinatra, Nanoc web applications.</p></li>
<li><p>Now Ruby developers are using IRuby notebook for interactive programming.
<code>daru-view</code> support IRuby notebook as well. So if you just want to see chart
for some DataFrame or Array of data, you can use <code>daru-view</code>.</p></li>
<li><p><code>daru-view</code> can generate chart images to download and save.</p></li>
<li><p><code>daru-view</code> adapters <code>googlecharts</code>, <code>highcharts</code> are able to geneate 3D charts as well.</p></li>
<li><p><code>Table</code> have some main features like pagination, search and many more to be added.It is
designed to load large data set smoothly.</p></li>
</ul>


<h2>Introduction</h2>

<p>Daru is doing pretty good work as the data analysis &amp; manipulation in IRuby notebook as well as backend part of web application. Ruby web application frameworks like Ruby on Rails, Sinatra, Nanoc are popular frameworks. So if Ruby developers get the gem like daru which can do data analysis
and visualization work in applications, then there is no need of shifting to another language or usage of other gem.</p>

<p>My project for <abbr title="Google Summer of Code 2017"> GSoC 2017</abbr> was to "make Daru more ready for integration with modern Web framework" in terms of visualization.</p>

<p>To improve in terms of viewing data,
<a href="https://github.com/Shekharrajak/daru-view">daru-view</a>, a plugin gem for
<a href="https://github.com/SciRuby/daru">daru</a> is created. <a href="https://github.com/Shekharrajak/daru-view">daru-view</a> is for easy and interactive plotting in web application &amp; IRuby notebook. It can work in frameworks like Rails, Sinatra, Nanoc and hopefully in others too.</p>

<p>To see a quick overview of daru-view's features, have a look at these examples:</p>

<ul>
<li><p><a href="http://nbviewer.jupyter.org/github/shekharrajak/daru-view/tree/master/spec/dummy_iruby/">IRuby Notebook Examples</a></p></li>
<li><p><a href="https://github.com/Shekharrajak/daru_examples_io_view_rails">daru io and daru-view usage in Rails app</a></p></li>
<li><p><a href="https://github.com/Shekharrajak/daru-view/blob/master/README.md">README of daru-view</a></p></li>
</ul>


<h2>Examples</h2>

<p>This is how we can create a Plot class object:</p>

<p>```ruby</p>

<p>Daru::View::Plot.new(data, options)
```</p>

<ul>
<li><p><code>data</code> can be <code>Daru::DataFrame</code>, data array or the format that the adapter support.</p></li>
<li><p><code>options</code> is a hash that contains various options to customize the chart.
If you have chosen a plotting library then you must use the options according
to the options the library providing. Here is the library <code>daru-view</code> uses.
Please check the examples options, they are passing in javascript code:</p>

<ul>
<li><p>GoogleCharts: <a href="https://developers.google.com/chart/interactive/docs/gallery">https://developers.google.com/chart/interactive/docs/gallery</a></p></li>
<li><p>HighCharts: <a href="https://www.highcharts.com/demo">https://www.highcharts.com/demo</a></p></li>
<li><p>Nyaplot: <a href="https://github.com/SciRuby/nyaplot">https://github.com/SciRuby/nyaplot</a> (it works same as <code>daru</code>)</p></li>
</ul>
</li>
</ul>


<p>Note: User must have some knowledge about the plotting tool(that you want to
use) to use it in <code>daru-view</code>. So that you can pass the correct options.</p>

<h3>GoogleCharts:</h3>

<p>Set the plotting library to <code>:googlecharts</code> to use this adapter. This will
load the required js files in your webpage or IRuby notebook.</p>

<p><code>ruby
require 'daru/view'
Daru::View.plotting_library = :googlecharts
</code></p>

<p>Let's create a DataFrame :</p>

<p>```ruby
idx = Daru::Index.new ['Year', 'Sales']
data_rows = [</p>

<pre><code>      ['2004',  1000],
      ['2005',  1170],
      ['2006',  660],
      ['2007',  1030]
</code></pre>

<p>]
df_sale_exp = Daru::DataFrame.rows(data_rows)
df_sale_exp.vectors = idx</p>

<h1>perform data manipulations, if you want.</h1>

<p>```</p>

<p>Now time to plot it:</p>

<p><code>ruby
line_basic_chart = Daru::View::Plot.new(df_sale_exp)
line_basic_chart.chart
</code></p>

<p>This will return the chart object we created using GoogleCharts.
In IRuby notebook, you will see this:</p>

<p>{% img https://github.com/Shekharrajak/gsoc_2017_blog/blob/master/img/googlecharts_line1.png?raw=true 'Basic line chart using GoogleCharts' 'Basic line chart using GoogleCharts' %}</p>

<p>You can find the IRuby notebook example in <a href="http://nbviewer.jupyter.org/github/shekharrajak/daru-view/blob/master/spec/dummy_iruby/Google%20Chart%20%7C%20%20Line%20Chart.ipynb">this link</a>.</p>

<p>These are various charts type we can use e.g. line, area, bar, bubble,
candlestick, combo, histogram, org, pie, stepped area chart, timeline, treemap,
gauge, column, scatter, etc. We can find the customization options in the
<a href="https://developers.google.com/chart/interactive/docs/gallery">google charts site</a>.</p>

<p>Let me try another chart type Geo :</p>

<p>```ruby
country_population = [</p>

<pre><code>      ['Germany', 200],
      ['United States', 300],
      ['Brazil', 400],
      ['Canada', 500],
      ['France', 600],
      ['RU', 700]
</code></pre>

<p>]</p>

<p>df_cp = Daru::DataFrame.rows(country_population)
df_cp.vectors = Daru::Index.new(['Country', 'Population'])</p>

<p>geochart = Daru::View::Plot.new(</p>

<pre><code>df_cp, type: :geo, adapter: :googlecharts
</code></pre>

<p>)</p>

<p>```</p>

<p>Note: If you have already loaded the dependent JS files for the library then you can use <code>adapter: :googlecharts</code> in your Plot initialization.</p>

<p>{% img https://github.com/Shekharrajak/gsoc_2017_blog/blob/master/img/googlechart_geo1.png?raw=true 'Basic Geo chart using GoogleCharts' 'Basic Geo chart using GoogleCharts' %}</p>

<h3>HighCharts:</h3>

<p>Set the plotting library to <code>:highcharts</code> to use this adapter. This will
load the required js files in your webpage or IRuby notebook.</p>

<p><code>ruby
require 'daru/view'
Daru::View.plotting_library = :highcharts
</code></p>

<p>Let's pass the <code>data</code> as HighCharts support (we can pass a DataFrame as well):</p>

<p>```
data = [</p>

<pre><code>['Firefox',   45.0],
['IE',       26.8],
{
   :name=&gt; 'Chrome',
   :y=&gt; 12.8,
   :sliced=&gt; true,
   :selected=&gt; true
},
['Safari',    8.5],
['Opera',     6.2],
['Others',   0.7]
</code></pre>

<p>]
plt_pie = Daru::View::Plot.new data, type: :pie
```</p>

<p>This will return the <code>Plot</code> object we created.
In IRuby notebook, you will see this:</p>

<p>{% img https://github.com/Shekharrajak/gsoc_2017_blog/blob/master/img/highcharts_pie.png?raw=true 'Basic pie chart using HighCharts' 'Basic pie chart using HighCharts' %}</p>

<p>You can find the IRuby notebook example in <a href="http://nbviewer.jupyter.org/github/shekharrajak/daru-view/blob/master/spec/dummy_iruby/HighCharts-%20Pie%20charts.ipynb">this link</a>.</p>

<p>There are various charts type we can use e.g. line, area, bar, bubble,
dynamic chart, pie, column, scatter, etc. We can find the customization options in the
<a href="https://www.highcharts.com/demo">HighCharts site</a>.</p>

<h3>Nyaplot</h3>

<p>```ruby
require 'daru/view'</p>

<h1>set adapter</h1>

<p>Daru::View.plotting_library = :nyaplot</p>

<h1>define dataframe</h1>

<p>df = Daru::DataFrame.new({
  a: [1, 2, 4, -2, 5, 23, 0],
  b: [3, 1, 3, -6, 2, 1, 0],
  c: ['I', 'II', 'I', 'III', 'I', 'III', 'II']
  })
df.to_category :c</p>

<h1>creating scatter chart</h1>

<p>scatter_chart = Daru::View::Plot.new(df, type: :scatter, x: :a, y: :b, categorized: {by: :c, method: :color})</p>

<p>```</p>

<p>In IRuby notebook:</p>

<p>{% img https://github.com/Shekharrajak/gsoc_2017_blog/blob/master/img/nyaplot_scatter.png?raw=true 'Basic scatter chart using Nyaplot' 'Basic scatter chart using Nyaplot' %}</p>

<h3>GoogleChart data table</h3>

<p>```ruby
require 'daru/view'</p>

<h1>set adapter</h1>

<h1>You don't need this line if you have already using google chart for plotting.</h1>

<h1>It is just for loading the dependent js files.</h1>

<p>Daru::View.table_library = :googlechart</p>

<h1>Lets use array as <code>data</code> (we can pass Daru::DataFrame as well)</h1>

<p>data = [
  ['Galaxy', 'Distance', 'Brightness'],</p>

<pre><code>      ['Canis Major Dwarf', 8000, 230.3],
      ['Sagittarius Dwarf', 24000, 4000.5],
      ['Ursa Major II Dwarf', 30000, 1412.3],
      ['Lg. Magellanic Cloud', 50000, 120.9],
      ['Bootes I', 60000, 1223.1]
</code></pre>

<p>  ]
galaxy_table = Daru::View::Table.new(data)
galaxy_table.table
```</p>

<p>This will return the table object we created using GoogleCharts tool.
In IRuby notebook, you will see this:</p>

<p>{% img https://github.com/Shekharrajak/gsoc_2017_blog/blob/master/img/googlechart_table1.png?raw=true 'Basic table using GoogleCharts' 'Basic table using GoogleCharts' %}</p>

<p>We can create table using Vectors as well.</p>

<p>```ruby
dv = Daru::Vector.new [43934, 52503, 57177, 69658, 97031, 119931, 137133, 154175]</p>

<h1>adding pagination and some customization [optional]</h1>

<p>opts_pagination = {
  width: '100%', height: '100%' ,
  pageSize: 5,
}</p>

<p>table_vec = Daru::View::Table.new(dv, opts_pagination)</p>

<p>```
In Ruby Notebook:</p>

<p>{% img https://github.com/Shekharrajak/gsoc_2017_blog/blob/master/img/googlechart_vec_table1.png?raw=true 'Basic vector table using GoogleCharts' 'Basic vector table using GoogleCharts' %}</p>

<h3>DataTable</h3>

<p>```ruby
require 'daru/view'</p>

<h1>set adapter.</h1>

<p>Daru::View.table_library = :datatables</p>

<h1>Lets use Daru::DataFrame as <code>data</code> (we can pass Array as well)</h1>

<p>df = Daru::DataFrame.new(
  {</p>

<pre><code>b: [11,12,13,14,15],
a: [1,2,3,4,5],
c: [11,22,33,44,55]
</code></pre>

<p>  },</p>

<pre><code>order: [:a, :b, :c],
index: [:one, :two, :three, :four, :five]
</code></pre>

<p>)
df_datatable = Daru::View::Table.new(df, pageLength: 3)
<code>``
Currently there is some problem to diplay it in IRuby notebook, but in web application
you can see something like this using</code>df_datatable.div` :</p>

<p>{% img https://github.com/Shekharrajak/gsoc_2017_blog/blob/master/img/datatables_basic1.png?raw=true 'Basic table using Datatables' 'Basic table using Datatables' %}</p>

<h2>How to use it in Ruby web application</h2>

<p>As we know, we can get the HTML, JS code for the chart from the
<code>Daru::View::Plot</code> or <code>Daru:View::Table</code> object using <code>#div</code> method. So just
need to add that HTML, JS code in webpage in proper place.</p>

<p>There is few things to be noted:</p>

<ol>
<li><p>In layout of the webpage, you have to load all the dependent JS files.
So that HTML, JS code that is genearted work smoothly in that webpage. You
can load the dependent js file for nyaplot library using <code>Daru::View.dependent_script(:nyaplot)</code>, similarly for other library.</p></li>
<li><p>If you are using multiple library in one webpage then load multiple
dependent JS files, in that webpage layout (generally in head tag).</p></li>
</ol>


<p>We can set default adapter using <code>Daru::View.plotting_library = :googlecharts</code>
and also we can change it for particular object while initializing object,
i.e. <code>Daru::View::Plot.new(data, {adapter: :googlecharts})</code>. Just we have
to make sure that dependent JS files are loaded for it.</p>

<p>To make it easy, we have defined <code>daru_chart</code> (that works same as Daru::View::Plot.new) , <code>daru_table</code> (works same as Daru::View::Table.new) for Rails application.</p>

<p>So you can easily use it in controller or view of the application. For reference you can check the <a href="https://github.com/Shekharrajak/daru_examples_io_view_rails">demo Rails app</a>.</p>

<h2>Design of daru-view</h2>

<p><a href="https://github.com/Shekharrajak/daru-view">daru-view</a>, currently using
<a href="https://github.com/SciRuby/nyaplot">Nyaplot</a>, <a href="https://www.highcharts.com/">HighCharts</a>, <a href="https://developers.google.com/chart/interactive/docs/gallery">GoogleCharts</a> for plotting the charts. It is also
generating tables using <a href="https://datatables.net/">DataTables</a> and <a href="https://developers.google.com/chart/interactive/docs/gallery">GoogleCharts</a> with pagination, search and various features.</p>

<h3>Design Pattern in daru-view</h3>

<p>daru-view mainly uses the <a href="https://en.wikipedia.org/wiki/Adapter_pattern">adapter design pattern</a> and <a href="https://en.wikipedia.org/wiki/Composite_pattern">composite design pattern</a>.</p>

<ul>
<li><p><strong>Why Adapter design pattern:</strong></p>

<ul>
<li><p>Adapter pattern’s motivation is that we can reuse existing gems if we can modify the interface.</p></li>
<li><p>daru-view joins functionalities of independent or incompatible interfaces of different gems.</p></li>
<li><p><code>daru-view</code> have <a href="https://github.com/Shekharrajak/daru-view/blob/master/lib/daru/view/plot.rb"><code>Plot</code></a> and <a href="https://github.com/Shekharrajak/daru-view/blob/master/lib/daru/view/table.rb"><code>Table</code></a> class, which are using a <a href="https://github.com/Shekharrajak/daru-view/tree/master/lib/daru/view/adapters">adapter</a> when adapter(library to be used for plotting) is set for <code>Plot</code>, <code>Table</code> instance.</p></li>
</ul>
</li>
<li><p><strong>Why Composite design pattern:</strong></p>

<ul>
<li><p>To define common objects and use it for defining composite objects.</p></li>
<li><p>In <code>daru-view</code> we try to write common functions in a module and include it whenever needed.</p></li>
</ul>
</li>
</ul>


<h2>Implementation</h2>

<p>daru-view ensure that it's functions are usable in both IRuby notebook as well
as ruby web application frameworks.</p>

<p>The main thing we need to display something in web application or IRuby
notebook is <code>HTML</code> code of it. daru-view generates the <code>HTML</code> code of the
chart, table and the same can be used to display in web application &amp; IRuby
notebook.</p>

<p>These are the libraries which is used in daru-view currently:</p>

<h3>Nyaplot</h3>

<p><a href="https://github.com/SciRuby/nyaplot">Nyaplot</a> is good library for
visualization in IRuby notebook only. When we use Nyaplot as the adapter in
daru-view, it is usable in both IRuby notebook and web applications. Daru
DataFrame or Vector is used as the data source of the chart. It works
similar to the initial <code>daru</code> plotting system.</p>

<p>If user want to use the Nyaplot methods then it can be done on Nyaplot object.We
can get nyplot object using <code>daru_plot_obj.chart</code>.</p>

<p>i.e.</p>

<p>```ruby
daru_view_obj = Daru::View::Plot.new(</p>

<pre><code>              daru_dataframe, options={adapter: :nyaplot})
</code></pre>

<p>nyaplot_obj = daru_view_obj.chart</p>

<p>```</p>

<p>Now user can operate all the methods for Nyaplot object. Same thing is for
all other adapter in daru-view.</p>

<h3>HighCharts</h3>

<p>To add the <a href="https://www.highcharts.com/">HighCharts</a> features for plotting various chart types, daru-view uses the <a href="https://github.com/michelson/lazy_high_charts">lazy_high_charts</a> gem with additional features.</p>

<p>In this adapter data source can be Array of data, Daru::DataFrame, Daru::Vector or HTML table code of the data.</p>

<p>There are various of options in HighCharts. One can see the options that can
be used in <a href="https://www.highcharts.com/demo">HighCharts demo link</a>, which can
be directly used in daru-view Plot.</p>

<p><strong>HighCharts adaptor can work offline as well in daru-view. Developers can update the saved the JS files (in daru-view) using rake task automatically.</strong></p>

<p>If you is familiar with <code>lazy_high_chart</code> gem and want to use it for
config the chart then user can access the <code>lazy_high_chart</code> object using
<code>Daru::View::Plot#chart</code> and can do necessary operations.</p>

<h3>GoogleCharts</h3>

<p>To add the <a href="https://developers.google.com/chart/interactive/docs/gallery">GoogleCharts</a> features for plotting various chart types, daru-view uses the <a href="https://github.com/winston/google_visualr/">google_visualr</a> gem with additional features(in this module more new features are updated).</p>

<p>We want GoogleChart adapter to be very strong since Google chart tools always gets updated and it has amazing plotting features. Similar to the HighCharts module, here also we can use all the options described in Google Charts website.</p>

<p>User can access the <code>google_visualr</code> object using <code>Daru::View::Plot#chart</code>, if
they want to operate <code>google_visualr</code> methods.</p>

<h4>GoogleCharts as data table</h4>

<p>One of the good thing about google chart tool is, it can be used for generating table
for web application and IRuby Notebook with pagination and other features.</p>

<p><strong><code>Daru::View::Plot</code> can take data Array, Daru::DataFrame, Daru::Vector,
Daru::View::Table as data source.</strong></p>

<p><strong><code>Daru::View::Table</code> can take data Array, daru DataFrame, Daru Vector as data
 source.</strong></p>

<h3>DataTables</h3>

<p><a href="https://datatables.net/">DataTables</a> has interaction controls to any HTML table. It can handle large set of data and have many cool features.</p>

<p>To use it, daru-view uses <a href="https://github.com/Shekharrajak/data_tables">https://github.com/Shekharrajak/data_tables</a> gem. [Note: the gem name will be changed in near future]</p>

<p>It basically uses the HTML table code and add features that user want. So internally HTML table code of Daru::DataFrame and Daru::Vector is passed as data source parameter.</p>

<h2>Future Work</h2>

<p>daru-view will be more powerful and simple in near future. Developers can add
more libraries in daru-view easily, if required. To add library follow the setups given in
<a href="https://github.com/Shekharrajak/daru-view/blob/master/CONTRIBUTING.md">CONTRIBUTING.md</a></p>

<h2>Conclusion</h2>

<p>The aim of the daru-view is to plot charts in IRuby notebook and ruby web
application easily, so that developers need not have to use any other gem or
language for visualization.</p>

<p>It can work smoothly in Rails/Sinatra/Nanoc web frameworks and I hope it can work in other ruby frameworks as well, because daru-view is generating the html code and javascript code for the chart, which is basic need of the webpage.</p>

<p><strong>Why not use the plotting libraries directly?</strong></p>

<p>If you are using daru gem for analyzing the data and want to visualize it, then it will be good if you have data-visualization within daru and can plot it directly using DataFrame/Vector objects of daru.</p>

<p>daru-view will be helpful in plotting charts and tables directly from the Daru::DataFrame and Daru::Vector . daru-view using nyaplot, highcharts , google charts right now to plot the chart. So user can set the plotting library and get the chart accordingly.</p>

<p>Most of the plotting libraries doesn't provide the features of plotting charts in iruby notebook. They are defined only for web applications (mostly for Rails). But daru-view can plot charts in any ruby web application as well as iruby notebook.</p>

<h2>Acknowledgements</h2>

<p>I would like to thank to my mentors <a href="https://github.com/v0dro">Sameer Deshmukh</a>
,<a href="https://github.com/lokeshh">Lokesh Sharma</a> and <a href="https://github.com/zverok">Victor Shepelev</a> for their response and support and I am very grateful to the <a href="http://sciruby.com/">Ruby Science Foundation</a> for this golden opportunity.</p>

<p>I thank my fellow GSoC participants <a href="https://github.com/athityakumar">Athitya Kumar</a> and <a href="https://github.com/prasunanand">Prasun Anand</a> for their support and discussions on various topics.</p>

<p>Thanks to Google for conducting <a href="https://summerofcode.withgoogle.com">Google Summer of Code</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GSoC 2016 : A Look at SpiceRub::Body]]></title>
    <link href="http://sciruby.com/blog/2016/11/25/gsoc-2016-a-look-at-spicerub-body/"/>
    <updated>2016-11-25T02:23:00+09:00</updated>
    <id>http://sciruby.com/blog/2016/11/25/gsoc-2016-a-look-at-spicerub-body</id>
    <content type="html"><![CDATA[<p>One of the main goals of this project was to make the ephemerides
functions easily available to an end user. Ephemerides basically
refers to an object in space whose motion is being tracked and
observed. SPICE required you to provide the following parameters to
observe a body in space.</p>

<ul>
<li><code>Target</code>: The body of interest</li>
<li><code>Frame</code>: A rotational frame of reference (Default is J2000 [Not to be confused with the J2000 epoch])</li>
<li><code>Observer</code>: An observing body whose viewpoint is used to chart the vector</li>
<li><code>Epoch</code> : An epoch in Ephemeris Time</li>
</ul>


<p>SPICE has an integer-key convention for the kind of bodies that it
has support for. Each body can be referenced via a string or an
integer id. While there isn't an actual strict range for integer ID
classification, it is mentioned <a href="https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/req/naif_ids.html">here</a> and can be summed up
in the following <code>if</code> and <code>elsif</code> clauses. (In Ruby constant strings
are better off as symbols, so the constructor takes either an integer
ID of a string symbol)</p>

<p>```ruby
  if body_id > 2000000</p>

<pre><code>:asteroid
</code></pre>

<p>  elsif body_id > 1000000</p>

<pre><code>:comet
</code></pre>

<p>  elsif body_id > 1000</p>

<pre><code>:body
</code></pre>

<p>  elsif body_id > 10</p>

<pre><code>body_id % 100 == 99 ?
  :planet : :satellite
</code></pre>

<p>  elsif body_id == 10</p>

<pre><code>:star
</code></pre>

<p>  elsif body_id > 0</p>

<pre><code>:barycenter
</code></pre>

<p>  elsif body_id > -1000</p>

<pre><code>:spacecraft
</code></pre>

<p>  elsif body_id > -100000</p>

<pre><code>:instrument
</code></pre>

<p>  else</p>

<pre><code>:spacecraft
</code></pre>

<p>```</p>

<p>It was very tempting to involve inheritance and extend a base Body
class onto these potential classes, but I simply did not see the need
for it at this point. The way it is at the moment, the <code>Body</code> object
has a reader attribute type that stores some metadata about the body
for the user's convenience. Perhaps as coverage of SPICE improves,
this minor thing can be changed later on.</p>

<p>To create a Body object, you instantiate with either a body name or a
body id. Certain bodies such as instruments will require additional
kernels to be loaded. To proceed seamlessly, load a leap seconds
kernel, a planetary constants kernel, and an ephemeris kernel. (All
avaialable in <code>spec/data/kernels</code>)</p>

<p>```ruby
SpiceRub::Body.new(399)
=> #&lt;SpiceRub::Body:0x00000002769da8</p>

<pre><code> @code=399,
 @frame=:J2000,
 @name=:earth,
 @type=:planet&gt;
</code></pre>

<p>SpiceRub::Body.new(:earth)
=> #&lt;SpiceRub::Body:0x000000026c73c8
   @code=399,
   @frame=:J2000,
   @name=:earth,
   @type=:planet></p>

<p>SpiceRub::Body.new(:moon)
=> #&lt;SpiceRub::Body:0x0000000214ac88
   @code=301,
   @frame=:J2000,
   @name=:moon,
   @type=:satellite>
```</p>

<p><code>399</code> and <code>:earth</code> map to the same body in SPICE data. The frame of
reference can also be specified as a named parameter during
instantiation to set a custom default frame for that particular
object.</p>

<p>```ruby
SpiceRub::Body.new(399, frame: IAU_EARTH)
=> #&lt;SpiceRub::Body:0x000000020b1df8</p>

<pre><code> @code=399,
 @frame=:IAU_EARTH,
 @name=:earth,
 @type=:planet&gt;
</code></pre>

<p>```</p>

<p>In SPICE, a <code>state</code> is a 6 length column vector that stores position
and velocity in 3D cartesian co-ordinates</p>

<p>As a base case, let's find out the the position of the Earth with
respect to itself.</p>

<p>```ruby</p>

<p>earth.position_at(SpiceRub::Time.now, observer: earth)
=>
[
  [0.0]   [0.0]   [0.0]
]
```</p>

<p>The origin as seen from itself is still the origin, so this makes
sense. The methods <code>#velocity_at</code> and <code>#state_at</code> take an identical
set of parameters. While there is a bit of redundancy going on,
splitting them makes the API more elegant, but the basic relationship
between these three vectors is the following :-</p>

<p>```ruby</p>

<p>state = [</p>

<pre><code>      position[0],position[1],position[2],  
      velocity[0],velocity[1],velocity[2]
    ]
</code></pre>

<p>```</p>

<p>One thing to note is that state/velocity/position vectors will always
be returned as an <code>NMatrix</code> object, SciRuby's numerical matrix core,
to allow for calculations via the NMatrix API.</p>

<p>As an example that is used in the code, one line can turn a position
vector into distance from origin (here using Euclidean distance):</p>

<p><code>ruby
  position = earth.position_at(SpiceRub::Time.now, observer: observer)
  Math.sqrt( (position ** 2).sum[0] )      
</code></p>

<p>As a simple imprecise experiment, let's find out how the speed of
light can be "estimated" up with this data.</p>

<p>```ruby
distance = moon.distance_from(earth, now)
=> 367441.0260814745</p>

<p>time = moon.light_time_from(earth, now)
=> 1.2256513340354764</p>

<p>distance / time
=> 299792.458
```</p>

<p>The unit of distance here is kilometers, so the speed of light by this
measurement is about pretty close to the textbook figure of 3e+8 m/s.</p>

<p>There is also a function to check if a list of bodies are within a
radial proximity from an observing body. We already calculated the
distance of the moon to be about 367,000 km. The function
<code>within_proximity</code> returns a list of all bodies that are within the
specified radial distance from the calling body object.</p>

<p>```ruby</p>

<h1>assuming venus and mercury are instantiated</h1>

<p>earth.within_proximity([moon, venus, mercury], 400000, now)
=> [#&lt;SpiceRub::Body:0x0000000191c4f8
  @code=301,
  @frame=:J2000,
  @name=:moon,
  @type=:satellite>]
```</p>

<p>Now that we've come to the end of the functionality, I would like to
mention that there is another named argument <code>aberration_correction</code>
which is basically an error reduction method to provide a more
accurate result than the default observation. The default <code>:none</code>
option for aberration correction basically provides the geometric
observations without any corrections for reception or transmission of
photons. For a list of various aberration correction methods
available, have a look at the documentation for <a href="ftp://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/spkpos_c.html">spkpos_c</a> to
find out if you need an aberration correction on SPICE data.</p>

<p>```ruby
d1 = moon.distance_from(earth, SpiceRub::Time.now, aberration_correction: :none)
=> 369111.0550333138
d2 = moon.distance_from(earth, SpiceRub::Time.now, aberration_correction: :LT)
=> 369146.60640691273</p>

<p>d2 - d1
=> 35.55137359892251
```</p>

<p>If you want to look at it another way, no aberration correction would
give you the textbook response of rigid geometry, while introducing an
aberration correction would give you a somewhat more realistic output
accounting for the errors that do happen when these observations are
made.</p>

<p>Finally, if you need to generate a continuous time series for a body,
then <code>SpiceRub::Time</code> has two functions to aid in that:</p>

<p>```ruby
SpiceRub::Time.linear_time_series(now, now + 86400, 4)
=> [</p>

<pre><code>#&lt;SpiceRub::Time:0x00000001fe8b60 @et=525180780.18277323&gt;,
#&lt;SpiceRub::Time:0x00000001fe8a20 @et=525209580.18277323&gt;,
#&lt;SpiceRub::Time:0x00000001fe88b8 @et=525238380.18277323&gt;,
#&lt;SpiceRub::Time:0x00000001fe8750 @et=525267180.18277323&gt;
</code></pre>

<p>   ]
```</p>

<p>In this case, I took a start time and an end time that was one day
after and requested 4 linearly spaced epochs. This is basically an
interface to <code>NMatrix.linspace</code>.</p>

<p>The other function requires you to input a start time and an end time
and a step size that keeps getting added to the start time till the
end time is reached. As a contrived example, we'll take two epochs,
five days apart and ask for a step size of a day, expecting six
elements.</p>

<p>```ruby</p>

<p>SpiceRub::Time.time_series(now, now + 5 * 86400, step: 86400)
=> [</p>

<pre><code>#&lt;SpiceRub::Time:0x00000001646580 @et=525180780.18277323&gt;,
#&lt;SpiceRub::Time:0x00000002f315b8 @et=525267180.18277323&gt;,
#&lt;SpiceRub::Time:0x00000002f31590 @et=525353580.18277323&gt;,
#&lt;SpiceRub::Time:0x00000002f31568 @et=525439980.18277323&gt;,
#&lt;SpiceRub::Time:0x00000002f31540 @et=525526380.18277323&gt;,
#&lt;SpiceRub::Time:0x00000002f31518 @et=525612780.18277323&gt;
</code></pre>

<p>   ]</p>

<p>```</p>

<p>And that's it for this blog post. I would appreciate any feedback
regarding this as I've been juggling the design back and forth very
frequently. There is large potential of expansion of the <code>Body</code> class,
particularly creating new classes as when different Bobdy objects
would have a corresponding function. (For example, the function
<code>getfov_c</code> which returns the field of view of an instrument could be
an instance function attached to the <code>Instrument</code> subclass of <code>Body</code>,
but this is just potential expansions in the future.)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GSoC 2016 : A Look at SpiceRub::Time]]></title>
    <link href="http://sciruby.com/blog/2016/11/25/gsoc-2016-a-look-at-spicerub-time/"/>
    <updated>2016-11-25T02:22:00+09:00</updated>
    <id>http://sciruby.com/blog/2016/11/25/gsoc-2016-a-look-at-spicerub-time</id>
    <content type="html"><![CDATA[<p>Many popular programming languages these days ship with powerful Time
classes/interfaces to make the inevitable task of dealing with
time-related computations a more DRY experience. Humans like their
time representations to be stringy concatenations of various numbers
and alphabets that enable a large variety of date and time formats to
mean the same thing and still make instant sense to the human eye. It
was the creation of time zones that made our convenient 24-hour clocks
stay the way they are without experiencing day and night at the same
"time" across the globe. So now <code>00:00 A.M. UTC</code> is <code>5:30 A.M. IST</code>
for me, and the world remains sane.</p>

<p>But what happens when you accept the fact that you're just a speck of
micro-dust adjusting time relatively for an only slightly bigger speck
of dust floating in the universe? Twenty-four hours in a day and thus we reset
after 2300, but consider: how would a resident of Venus know
when tea-time is on Venus if he had an Earth wristwatch that reset
after twenty-four hours? Barely a tenth of Venus' day is complete in that time!
(If you know anybody intent on relocating to Mars, do not gift them a
clock or watch.)</p>

<p>So a decimal floating point representation must be the answer for
uniformity. Time zones can be dealt with; we'll just pick a convenient
point in time and count the seconds from there onwards so that the
location on Earth doesn't matter henceforth. It'll drive humans insane
with the arithmetic but machines will work just fine with this. This
sort of a time system is called epoch time.</p>

<p>And so the internal time of most UNIX machines is the number of
seconds after midnight on <code>Thursday, 1 January 1970 UTC</code>. (And this
very convention is going to open a can of worms by
<a href="https://en.wikipedia.org/wiki/Year_2038_problem">2038</a> if there is even a small set of critical machines
that haven't moved on from 32-bit architectures.)</p>

<p>But we're still not okay universally. Try going on an infinite journey
to space and you'll find that counting seconds leads to some
inconsistencies with your local time when you try to synchronize with
Earth. How can the number of seconds after January 1970 be different
in any case? Well, your MacBook Pro has not been adjusted for
... relativity! Gravity bends light and thus the perception of
time. There's a lot more mass, and thus a lot more gravitatonal fields
in neighborhoods away from Earth. The exact details of how this works
is beyond the scope of this blog post.</p>

<p>If the past few paragraphs were incessant and seemingly irrelevant,
they were there to drive home the point that Earth time simply will
not do when we step out of the ghetto to see what's happening. But
astronomy's been around for way longer, and astrophysicists came
forth with a time system adjusted for the relativity effects of the
solar system, called Barycentric Dynamical Time, or <em>TDB</em>. Like our
machines, it counts the seconds after a certain known reference time
point, except that it adjusts for relativity and can become a standard
for astronomical time.</p>

<p>There are many similar time scales like this, but SPICE has chosen to
use TDB as the standard for most of their design. Within the SPICE
API, TDB is the same as <em>Ephemeris Time</em> which is the main system used
to specify time points of astronomical bodies. Even though spacecrafts
have their clocks coordinated with UTC on Earth, you would require
that time in Ephemeris Time to be able to calculate their positions and
velocities using SPICE. <code>SpiceRub::Time</code> is built for this very purpose,
to revolve around a main attribute <code>@et</code> for Ephemeris Time and
provide many methods to convert to and from.</p>

<p>If you'd like to proceed with the examples, you'll need a Leap Second
Kernel file to use <code>SpiceRub::Time</code>. This is a generic kernel, so you
can easily use <code>naif0011.tls</code> in <code>spec/data/kernels</code> of the repository
folder.</p>

<p>So Ephemeris Time is the number of seconds elapsed after <code>Noon, January 1, 2000, TDB</code>. This point in time is also known as the <code>J2000</code>
epoch. We find that out in an instant by using the <code>Time.parse</code>
function which is a wrapper function for SPICE's <code>str2et_c</code> that
converts many formats of strings to <code>Ephemeris Time</code>. You can have a
look at the various string formats supported in its documentation
<a href="https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/str2et_c.html">here</a></p>

<p><code>ruby
 SpiceRub::Time.parse("12:00 Jan 1 2000 TDB")
=&gt; #&lt;SpiceRub::Time:0x0000000325b1f8 @et=0.0&gt;
</code></p>

<p>So as a base case, using the reference epoch gives us 0 seconds as we would expect. Now would also be a good time to find out the discrepancy in <code>UTC</code> as well.</p>

<p><code>ruby
SpiceRub::Time.parse("12:00 Jan 1 2000 UTC")
=&gt; #&lt;SpiceRub::Time:0x000000031c28e0 @et=64.18392728473108&gt;
</code></p>

<p>So right away we know that UTC was 64-ish seconds off from TDB / ET at the time of the reference J2000 epoch. What would the difference be around right now?</p>

<p>```ruby
now = SpiceRub::Time.now
=> #&lt;SpiceRub::Time:0x000000030bf8f8 @et=525173312.1827749></p>

<p>(now - now.to_utc).to_f
=> 68.18277490139008</p>

<p>```</p>

<p>Well, here's a surprise, it's 68.18 now. Before I explain why that is,
here is a brief overview of what the above code does:</p>

<p><code>Time.now</code> is a convenient way to specify your current UTC
timezone. It uses Ruby's core <code>Time.now</code> method so this method is only
good if you're working in UTC or Earth like Timezones. For a similar
purpose, the function <code>Time.from_time</code> let's you create a SpiceRub
Time object from a Ruby Time object.</p>

<p>The <code>+/-</code> operators return a new Time object where the right operand
is added/subtracted to the left operand's <code>@et</code> when it is a float or
integer. If a Time object is supplied , then it does the same with the
right operand's ephemeris time instead. (Note that there really isn't
a significant meaning to having a Time object whose @et is the
difference/sum of two other epochs, however you can increase a certain
epoch or decrease it by a constant offset of seconds)</p>

<p>In our case we used <code>#to_utc</code> to convert from ephemeris time to UTC,
and then the minus operator gave us a Time object that wasn't really
an epoch, but a difference of two epochs, so using <code>#to_f</code> got us
exactly that.</p>

<p>It appears that UTC has changed by 4 seconds since 2000 with respect
to ephemeris time. This is actually the adjustment of "leap seconds"
that gets added to UTC to prevent it from falling too far behind other
time systems. (Humans really like to hack everything, don't they?)</p>

<p>To verify this yourself, if you open up the kernel <code>naif0011.tls</code> in your
text editor and search for <code>DELTET/DELTA_AT</code>, you'll find a list like
representation of the following sort :-</p>

<p>```
DELTET/DELTA_AT        = ( 10,   @1972-JAN-1</p>

<pre><code>                       ..,   ...........
                       32,   @1999-JAN-1
                       33,   @2006-JAN-1
                       34,   @2009-JAN-1
                       35,   @2012-JUL-1
                       36,   @2015-JUL-1 )
</code></pre>

<p>```</p>

<p>Here you can see that just before the year 2000, there were 32 leap
seconds added to UTC, and in 2015 when the last leap second was added,
there were 36. It's an ongoing and indefinite process and so there
really is no way to account for leap second errors far in the future
for leap seconds that are yet to be added. As of now, the next
scheduled addition is in December, 2016.</p>

<p>Coming back to our Time object, let's look at its basic
construction. One tricky task in the API was the option to specify
different epochs of reference in different time scales, like
International Atomic Time. As of now, <code>Time.new</code> requires that you
have kept your word of using the J2000 epoch and allows you to use a
named parameter <code>seconds:</code> for specifying the time scale. The use of
<code>scale</code> as a key was avoided as it sometimes is also used to refer to the
reference epoch used.</p>

<p>```ruby</p>

<p>epochs = [:utc, :tdb, :tai].map
  { |scale| SpiceRub::Time.new(0, seconds: scale) }</p>

<p>=> [#&lt;SpiceRub::Time:0x00000002756fc8 @et=64.18392728466942>,</p>

<pre><code>#&lt;SpiceRub::Time:0x00000002756eb0 @et=0&gt;,
#&lt;SpiceRub::Time:0x00000002756cf8 @et=32.18392727400827&gt;]
</code></pre>

<p>```</p>

<p><code>:tai</code> here refers to International Atomic Time. For a list of more
parameters and their keyword abbreviations, have a look at
<a href="https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/unitim_c.html">this</a> SPICE documentation for the function that the
conversion is wrapped on top of.</p>

<p>But there is also a way to reference other epochs without doing the
manual conversions yourself, you can call the class method <code>Time.at</code>
to perform the same function as the constructor, with the option of a
different reference epoch. The resultant Time object will however have
its internal time referring to J2000.</p>

<p>A more readable way would involve step by step calculations, but that
would consume runtime resources everytime <code>Time.at</code> is called, so I've
basically pre-calculated the ephemeris times of the reference epochs
and subtracted them from the epoch.</p>

<p>```ruby
  case reference.downcase
  when :j2100</p>

<pre><code>new(offset + 3155760000.0, seconds: seconds)
</code></pre>

<p>  when :j2000, :et</p>

<pre><code>new(offset, seconds: seconds)      
</code></pre>

<p>  when :j1950</p>

<pre><code>new(offset - 1577880000.0, seconds: seconds)
</code></pre>

<p>  when :j1900</p>

<pre><code>new(offset - 3155760000.0, seconds: seconds)
</code></pre>

<p>  when :gps</p>

<pre><code>new(offset - 630763148.8159368, seconds: seconds)
</code></pre>

<p>  when :unix</p>

<pre><code>new(offset - 946727958.8160644, seconds: seconds)
</code></pre>

<p>  end
```</p>

<p>To quickly verify the last one with the <code>#to_s</code> method:</p>

<p><code>ruby
SpiceRub::Time.new(-946727958.8160644).to_s
=&gt; "Thu Jan 01 00:00:00 UTC 1970"
</code></p>

<p>It's exactly the UNIX epoch! Let's try out 1 day (86400 seconds) after
this epoch:</p>

<p><code>ruby
SpiceRub::Time.at(86400, :unix).to_s
=&gt; "Thu Jan 01 23:59:59 UTC 1970"
</code></p>

<p>Just a second short of heading into the next day, because we've added
86400 TDB seconds and converted the time into a UTC string.</p>

<p>There are some more functions provided to work in tandem with the
<code>Body</code> class that I'll explain more about in the next blog post, but
this more or less covers the core of <code>SpiceRub:Time</code>. Till then,
thanks for reading.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GSoC 2015: New NMatrix gems for advanced linear algebra features]]></title>
    <link href="http://sciruby.com/blog/2015/08/19/gsoc-2015-nmatrix/"/>
    <updated>2015-08-19T09:57:00+09:00</updated>
    <id>http://sciruby.com/blog/2015/08/19/gsoc-2015-nmatrix</id>
    <content type="html"><![CDATA[<p>My Google Summer of Code project was working on the <a href="https://github.com/SciRuby/nmatrix">NMatrix project</a>, moving
functionality that depends on external libraries from the core <code>nmatrix</code>
gem to optional plugin gems. NMatrix is a Ruby library for linear algebra,
used by many other projects.
In addition to the code that was part of
NMatrix proper, NMatrix previously required the <a href="http://math-atlas.sourceforge.net/">ATLAS library</a>, which
implemented fast versions of common matrix operations like multiplication
and inversion, as well as more advanced operations like eigenvalue
decomposition and Cholesky decomposition.</p>

<p>There were two separate but related motivations for my project. The
first was to simplify the NMatrix installation
process. ATLAS can be difficult to install, so the installation
process for NMatrix was complicated, especially on
OS X, and may have discouraged people from using NMatrix.
The second motivation was that by separating out the ATLAS code from the
main NMatrix code, it would be easier to add new linear algebra backends
which provide similar features. Indeed, I implemented a second backend this
summer.</p>

<p>The end result of my summer's work:</p>

<ul>
<li>The core <code>nmatrix</code> gem does not depend on any external linear matrix
libraries. It provides non-optimized implementations of common matrix
operations.</li>
<li>All code that requires ATLAS has been moved into the new <code>nmatrix-atlas</code>
gem, so that
those who are only interested in the core functionality are not required to
install ATLAS. <code>nmatrix-atlas</code> provides optimized implementations of common matrix
operations, as well as advanced functions not available in <code>nmatrix</code>.
I wrote a blog post describing the setup for <a href="http://wlevine.github.io/2015/06/15/releasing-multiple-gems-with-c-extensions-from-the-same-repository.html">releasing multiple gems from the same repository</a>, which this required.</li>
<li>A new gem <code>nmatrix-lapacke</code>, which provides the same features as
<code>nmatrix-atlas</code>, but instead of depending specifically on the ATLAS
library, requires any generic <a href="https://en.wikipedia.org/wiki/LAPACK">LAPACK</a> and
<a href="https://en.wikipedia.org/wiki/Basic_Linear_Algebra_Subprograms">BLAS</a>
implementation. This should be easier to use for many users as they may
already have LAPACK installed (it comes pre-installed with OS X and is
commonly used in Linux systems), but not ATLAS.</li>
<li>The installation procedure is simplified, especially for those installing
just the <code>nmatrix</code> gem. Compare the <a href="https://github.com/SciRuby/nmatrix/wiki/Installation">new installation instructions</a>
to the <a href="https://github.com/SciRuby/nmatrix/wiki/Installation/2ac41c62d35c79468d3d8169be0ccba238c3c921">old ones</a>.</li>
</ul>


<p>The one deviation from my original proposal was that I originally intended to remove
all the ATLAS code and release only the <code>nmatrix-lapacke</code> plugin, so that we
would only have one interface to the advanced linear algebra functions, but I
decided to keep the ATLAS code, since the <code>nmatrix-lapacke</code> code is new and
has not had a chance to be thoroughly tested.</p>

<h3>Usage</h3>

<p>```ruby
require 'nmatrix'</p>

<h1>create a 3-by-3 matrix</h1>

<p>a = NMatrix.new([3,3], [1,2,3, 4,5,6, 7,8,9], dtype: :float64)</p>

<h1>invert it using non-optimized NMatrix-internal implementation</h1>

<p>a.invert!
```</p>

<p>```ruby
require 'nmatrix'
require 'nmatrix/atlas' #or require 'nmatrix/lapacke'</p>

<h1>create a 3-by-3 matrix</h1>

<p>a = NMatrix.new([3,3], [1,2,3, 4,5,6, 7,8,9], dtype: :float64)</p>

<h1>invert it using optimized implementation provided by ATLAS</h1>

<p>a.invert!
```</p>

<p>For advanced functions not provided by the core <code>nmatrix</code> gem, for example
<a href="http://sciruby.com/nmatrix/docs/NMatrix.html#method-i-gesvd"><code>gesvd</code></a>, <code>nmatrix-atlas</code> and <code>nmatrix-lapacke</code>
provide a common interface:</p>

<p><code>ruby
require 'nmatrix'
require 'nmatrix/atlas'
a = NMatrix.new([4,5],[1,0,0,0,2, 0,0,3,0,0, 0,0,0,0,0, 0,4,0,0,0],
dtype: dtype)
u, s, vt = a.gesvd
</code></p>

<p>```ruby</p>

<h1>Identical to the above, except for the require</h1>

<p>require 'nmatrix'
require 'nmatrix/lapacke'
a = NMatrix.new([4,5],[1,0,0,0,2, 0,0,3,0,0, 0,0,0,0,0, 0,4,0,0,0],
dtype: dtype)
u, s, vt = a.gesvd
```</p>

<p>If the developer wants to use an advanced feature, but does not care
whether the user is using <code>nmatrix-atlas</code>
or <code>nmatrix-lapacke</code>, they can <code>require nmatrix/lapack_plugin</code>, which will
require whichever of the two is available, instead of being forced to
choose between the two.</p>

<p>As a fun test of the new gems, I did a very simple benchmark, just
testing how long it took to invert a
1500-by-1500 matrix in place using <code>NMatix#invert!</code>:</p>

<ul>
<li><code>nmatrix</code> (no external libraries): 3.67s</li>
<li><code>nmatrix-atlas</code>: 0.96s</li>
<li><code>nmatrix-lapacke</code> with ATLAS: 0.99s</li>
<li><code>nmatrix-lapacke</code> with OpenBLAS (multithreading enabled): 0.39s</li>
<li><code>nmatrix-lapacke</code> with reference implementations of LAPACK and BLAS: 3.72s</li>
</ul>


<p>This is not supposed to be a thorough or realistic benchmark (performance will
depend on your system, on how you built the libraries, and on the exact
functions that you use), but there
are still a few interesting conclusions we can draw from it:</p>

<ul>
<li>Performance is much better using the two highly optimized libraries
(ATLAS and OpenBLAS) than using either the NMatrix
internal implementation or the reference implementation.</li>
<li>When using ATLAS, performance is similar whether using <code>nmatrix-atlas</code>
and <code>nmatrix-lapacke</code> (this means we could consider deprecating
the <code>nmatix-atlas</code> gem).</li>
</ul>


<p>Overall, my summer has been productive. I implemented everything that I
proposed and feedback from testers so far has been positive.
I plan to stay involved with NMatrix, especially to follow up on any issues
related to my changes.
Although I won't be a student next summer, I would certainly consider
participating in Google Summer of Code in the future as a mentor.
I'd like to
thank my mentor John Woods and the rest of the SciRuby community for support
and feedback throughout the summer.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GnuplotRB and GSoC 2015]]></title>
    <link href="http://sciruby.com/blog/2015/08/18/gnuplotrb-project/"/>
    <updated>2015-08-18T23:26:00+09:00</updated>
    <id>http://sciruby.com/blog/2015/08/18/gnuplotrb-project</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>This summer I've been participating in Google Summer of Code
 with <a href="https://github.com/dilcom/gnuplotrb">GnuplotRB project</a> (plotting tool for Ruby users based on <a href="http://www.gnuplot.info/">Gnuplot</a>)
 for <a href="http://sciruby.com/">SciRuby</a>. GSoC is almost over and I'm releasing v0.3.1 of GnuplotRB as a <a href="https://rubygems.org/gems/gnuplotrb/">gem</a>.
 In this blog post I want to introduce the gem and highlight some of its capabilities.</p>

<h2>Features</h2>

<p>There are several existing plotting tools for Ruby such as Nyaplot, Plotrb, Rubyvis
 and Gnuplot gem. However they are not designed for large datasets and have fewer
 plotting styles and options than Gnuplot. Gnuplot gem was developed long ago and nowadays consists
 mostly of hacks and does not support modern Gnuplot features such as multiplot.</p>

<p>Therefore my goal was to develop new gem for Gnuplot which would allow full use of its
 features in Ruby. I was inspired to build an easy-to-use interface for the most commonly
 used features of Gnuplot and allow users to customize their plots with
 Gnuplot options as easily as possible in Rubyesque way.</p>

<!--more-->


<h3>2D and 3D plots</h3>

<p>The main feature of every plotting tool is its ability to plot graphs. GnuplotRB allows you
 to plot both mathematical formula  and (huge) sets of data. GnuplotRB supports plotting
 2D graphs (<code>GnuplotRB::Plot</code> class)  in Cartesian/parametric/polar coordinates and 3D
 graphs (<code>GnuplotRB::Splot</code> class) &mdash; in Cartesian/cylindrical/spherical coordinates.</p>

<p>There are vast of plotting styles supported by GnuplotRB:</p>

<ul>
<li><code>points</code></li>
<li><code>lines</code></li>
<li><code>histograms</code></li>
<li><code>boxerrorbars</code></li>
<li><code>circles</code></li>
<li><code>boxes</code></li>
<li><code>filledcurves</code></li>
<li><code>vectors</code></li>
<li><code>heatmap</code></li>
<li>etc (full list in <a href="http://www.gnuplot.info/docs_5.0/gnuplot.pdf">gnuplot doc</a> p. 47)</li>
</ul>


<p>Plot examples:</p>

<p><img src="{{ site.url }}/images/gnuplotrb-gsoc2015/plots.jpg" alt="Plot example" style="width: 100%;"/></p>

<p>For code examples please see
 <a href="https://github.com/dilcom/gnuplotrb/blob/master/README.rdoc">the repository README</a>,
 <a href="https://github.com/dilcom/gnuplotrb/blob/master/notebooks/README.rdoc">notebooks</a>
 and <a href="https://github.com/dilcom/gnuplotrb/tree/master/examples">the examples folder</a>.</p>

<h3>Multiplot</h3>

<p><code>GnuplotRB::Multiplot</code> allows users to place several plots on a single layout and output
 them at once (e.g., to a PNG file).
 <a href="http://nbviewer.ipython.org/github/dilcom/gnuplotrb/blob/master/notebooks/multiplot_layout.ipynb">Multiplot notebook</a>.</p>

<p>Here is a multiplot example
 (taken from <a href="http://nbviewer.ipython.org/github/SciRuby/sciruby-notebooks/blob/master/Data%20Analysis/Analyzing%20baby%20names/Use%20Case%20-%20Daru%20for%20analyzing%20baby%20names%20data.ipynb">Sameer's notebook</a>):</p>

<p><img src="{{ site.url }}/images/gnuplotrb-gsoc2015/multiplot.jpg" alt="Multiplot example" style="width: 80%; align: middle;"/></p>

<h3>Animated plots</h3>

<p>GnuplotRB may output any plot to gif file but <code>GnuplotRB::Animation</code> allows
 to make this gif animated. It takes several <code>Plot</code> or <code>Splot</code> objects just as
 multiplot does and outputs them one-by-one as frames of gif animation.
 <a href="http://nbviewer.ipython.org/github/dilcom/gnuplotrb/blob/master/notebooks/animated_plots.ipynb">Animation notebook</a>.</p>

<p><img src="{{ site.url }}/images/gnuplotrb-gsoc2015/trajectory.gif" alt="Trajectory example" style="width: 80%; align: middle;"/></p>

<h3>Fit</h3>

<p>Although the main GnuplotRB's purpose is to provide you with swift, robust and
 easy-to-use plotting tool, it also offers a <code>Fit</code> module that contains several
 methods for fitting given data with a function. See examples in <a href="http://nbviewer.ipython.org/github/dilcom/gnuplotrb/blob/master/notebooks/fitting_data.ipynb">Fit notebook</a>.</p>

<h3>Integration with other SciRuby tools</h3>

<h4>Embedding plots into iRuby notebooks</h4>

<p>GnuplotRB plots may be embedded into iRuby notebooks as JPEG/PNG/SVG
 images, as ASCII art or GIF animations (<code>Animation</code> class). This functionality
 explained in a special <a href="http://nbviewer.ipython.org/github/dilcom/gnuplotrb/blob/master/notebooks/basic_usage.ipynb">iRuby notebook</a>.</p>

<h4>Using data from Daru containers</h4>

<p>To link GnuplotRB with other SciRuby tools I implemented plot
 creation from data given in Daru containers (<code>Daru::Dataframe</code> and <code>Daru::Vector</code>).
 One can use <code>daru</code> gem in order to work with statistical SciRuby gems
 and plotting with GnuplotRB. Notebooks with examples: <a href="http://nbviewer.ipython.org/github/dilcom/gnuplotrb/blob/master/notebooks/plotting_from_daru.ipynb">1</a>, <a href="http://nbviewer.ipython.org/github/dilcom/gnuplotrb/blob/master/notebooks/time_series_from_daru.ipynb">2</a>.</p>

<h3>Possible datasources for plots</h3>

<p>You can pass to Plot (or Splot or Dataset) constructor data in the following forms:</p>

<ul>
<li>String containing mathematical formula (e.g., <code>'sin(x)'</code>)</li>
<li>String containing name of file with data (e.g., <code>'points.data'</code>)</li>
<li>Some Ruby object responding to <code>#to_gnuplot_points</code>

<ul>
<li><code>Array</code></li>
<li><code>Daru::Dataframe</code></li>
<li><code>Daru::Vector</code></li>
</ul>
</li>
</ul>


<p>See examples in <a href="https://github.com/dilcom/gnuplotrb/blob/master/notebooks/README.rdoc#possible-datasources">notebooks</a>.</p>

<h2>Links</h2>

<ul>
<li><a href="https://github.com/dilcom/gnuplotrb/">Project repository</a></li>
<li><a href="https://rubygems.org/gems/gnuplotrb/">Gem page on Rubygems</a></li>
<li><a href="http://www.rubydoc.info/gems/gnuplotrb/0.3.1">Gem documentation on Rubydoc</a></li>
<li><a href="http://dilcom.github.io/gnuplotrb/">Blog of the project</a></li>
<li><a href="https://github.com/dilcom/gnuplotrb/tree/master/examples">Examples</a></li>
<li><a href="https://github.com/dilcom/gnuplotrb/blob/master/notebooks/README.rdoc">iRuby notebooks</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
