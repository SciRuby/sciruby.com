<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: SpiceRub, | SciRuby]]></title>
  <link href="http://sciruby.com/blog/categories/spicerub-/atom.xml" rel="self"/>
  <link href="http://sciruby.com/"/>
  <updated>2017-10-23T20:55:53+09:00</updated>
  <id>http://sciruby.com/</id>
  <author>
    <name><![CDATA[SciRuby]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GSoC 2016: SpiceRub::KernelPool and Kernels]]></title>
    <link href="http://sciruby.com/blog/2016/11/25/spicerub-kernelpool-and-kernels/"/>
    <updated>2016-11-25T02:32:35+09:00</updated>
    <id>http://sciruby.com/blog/2016/11/25/spicerub-kernelpool-and-kernels</id>
    <content type="html"><![CDATA[<p>So this post comes rather late, but I'd still like to talk about what I did in the first week, and a little into the second week.
Firstly, thanks to a pull request offered by my GSoC mentor John (<a href="https://github.com/mohawkjohn">@mohawkjohn</a>), I now have rake tasks set up properly in the repository and rake seems to be working.</p>

<p>There are installation instructions in the <a href="https://github.com/sciruby/spice_rub/blob/master/README.rdoc">readme</a> and there are already some sample Kernel files in
the spec folder to try out various routines on. Apart from cloning the repository, one additional thing you will need to do is <a href="https://naif.jpl.nasa.gov/naif/toolkit_C.html">download the SPICE toolkit</a>. You may want to keep the entire compressed file for later, but you'll only need the <code>cspice.a</code> file in the <code>lib/</code> subdirectory. After this follow the instructions in the <a href="https://github.com/sciruby/spice_rub/blob/master/README.rdoc">readme</a> and you should be good to go. (Be sure to run <code>bundle install</code> to install any dependencies that you don't already have.)</p>

<p>After you're done compiling and installing, run <code>rake pry</code> in the gem root directory.</p>

<p>If you remember, almost any useful task involving the SPICE Toolkit is preceded by loading data through kernel files. The relevant routine to do this is called <code>furnsh_c()</code> , and the most direct way to access it through Ruby is by calling the function <code>SpiceRub::Native.furnsh</code>. (However, this is not recommended because SpiceRub has a specific Ruby class unifying all the kernel related methods, and also because SPICE maintains its own internal variables for both tracking loaded kernel files and unloading them.)</p>

<p>Below is a crude dependency sequence:</p>

<p>```ruby
SpiceRub::KernelPool.load ->  SpiceRub::Native.furnsh -> furnsh_c</p>

<p>Ruby Interface            ->  C Accessor              -> External library</p>

<p>Ruby                      ->  Native Ruby-C API       -> Native 3rd Party C
```</p>

<p>That's the basic design of the wrapper, so here are a few simple examples on using the Kernel API. <code>=&gt;</code> denotes the interpreted output of pry.</p>

<p>First of all, the main KernelPool class is a singleton class, that means it can only be instantiated with the <code>#instance</code> method and the usual <code>#new</code> is private.
Any subsequent calls to <code>#instance</code> will produce the same object.</p>

<p>```ruby
kernel_pool = SpiceRub::KernelPool.instance
=> #&lt;SpiceRub::KernelPool:0x00000002db3218></p>

<p>rogue_kernel_pool = SpiceRub::KernelPool.new
NoMethodError: private method <code>new' called for SpiceRub::KernelPool:Class
from (pry):2:in</code><strong>pry</strong>'</p>

<p>rogue_kernel_pool = SpiceRub::KernelPool.instance
=> #&lt;SpiceRub::KernelPool:0x00000002db3218></p>

<p>rogue_kernel_pool == kernel_pool
=> true
```</p>

<p>This is to make sure there is only one KernelPool state being maintained at a time. Now we have a bunch of kernel files in the <code>spec/data/kernels</code> folder which we'll use for this example. There is an accessor attribute called <code>@path</code> which can be used to point to a particular folder.</p>

<p><code>ruby
kernel_pool.path = 'spec/data/kernels'
</code></p>

<p>From here on it's required that you're running pry or irb from the gem root folder in order for the paths to match in these examples.</p>

<p>Now let's load a couple of kernel files, you can type <code>system("ls", kernel_pool.path)</code> into your console to get a list of all the test kernels available in that folder. The KernelPool object has a <code>#load</code> method to load kernel files. If the variable path is set, then you only need to enter the file name, otherwise the entire path needs to be provided. An integer denoting the index of the kernel in the pool is returned if the load is successful.</p>

<p><code>ruby
kernel_pool.load("naif0011.tls")
=&gt; 0
</code></p>

<p>Note that this is the same as providing the full relative path of <code>spec/data/kernels/naif0011.tls</code> when the <code>path</code>  variable is not set or nil.</p>

<p>Let's load two more files:-</p>

<p>```ruby
kernel_pool.load("moon_pa_de421_1900-2050.bpc")
=> 1</p>

<p>kernel_pool.load("de405_1960_2020.bsp")
=> 2</p>

<p>kernel_pool
=> #&lt;SpiceRub::KernelPool:0x00000002db3218
 @path="spec/data/kernels",
 @pool=
  [#&lt;SpiceRub::KernelPool::SpiceKernel:0x0000000270fab0 @loaded=true, @path_to="spec/data/kernels/naif0011.tls">,
   #&lt;SpiceRub::KernelPool::SpiceKernel:0x000000026bd698 @loaded=true, @path_to="spec/data/kernels/moon_pa_de421_1900-2050.bpc">,
   #&lt;SpiceRub::KernelPool::SpiceKernel:0x000000024ce698 @loaded=true, @path_to="spec/data/kernels/de405_1960_2020.bsp">]></p>

<p>```</p>

<p>So now if you try to view the <code>@pool</code> member of <code>kernel_pool</code>, you'll find three SpiceKernel objects with <code>@loaded=true</code> and their respective file paths.
There isn't much to do with a <code>SpiceKernel</code> object except unload it, or check its state. Note that you can only load kernel files into a <code>KernelPool</code> object and unload them via the <code>SpiceKernel</code> object.</p>

<p>You can access the kernel pool by calling the <code>#[]</code> operator and using the index that was returned on load:</p>

<p>```ruby
kernel_pool[0]
=> #&lt;SpiceRub::KernelPool::SpiceKernel:0x0000000270fab0 @loaded=true, @path_to="spec/data/kernels/naif0011.tls"></p>

<p>kernel_pool.count
=> 3</p>

<p>kernel_pool[0].unload!
=> true</p>

<p>kernel_pool.count
=> 2</p>

<p>```</p>

<p>So here we unload the first kernel and note that the count drops to 2. If you look up <code>kernel_pool[0]</code>, you'll find that the kernel is still present &mdash; but its <code>@loaded</code> variable has been set to false, which means that it has been removed from the CSPICE internal kernel pool.</p>

<p><code>ruby
kernel_pool[0]
=&gt; #&lt;SpiceRub::KernelPool::SpiceKernel:0x0000000270fab0 @loaded=false, @path_to="spec/data/kernels/naif0011.tls"&gt;
</code></p>

<p>To unload all kernels simultaneously and delete the kernel pool, use <code>#clear!</code></p>

<p>```ruby</p>

<p>kernel_pool.clear!
=> true</p>

<p>kernel_pool.empty?
=> true</p>

<p>kernel_pool.pool
=> []
```</p>

<p>And that about wraps up this blog post on basic kernel handling. Since we know how to load data but not use it yet, I'll cover that and the various kernel types in the next blog post. Thank you for reading.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GSoC 2016 : A Look at SpiceRub::Body]]></title>
    <link href="http://sciruby.com/blog/2016/11/25/gsoc-2016-a-look-at-spicerub-body/"/>
    <updated>2016-11-25T02:23:00+09:00</updated>
    <id>http://sciruby.com/blog/2016/11/25/gsoc-2016-a-look-at-spicerub-body</id>
    <content type="html"><![CDATA[<p>One of the main goals of this project was to make the ephemerides
functions easily available to an end user. Ephemerides basically
refers to an object in space whose motion is being tracked and
observed. SPICE required you to provide the following parameters to
observe a body in space.</p>

<ul>
<li><code>Target</code>: The body of interest</li>
<li><code>Frame</code>: A rotational frame of reference (Default is J2000 [Not to be confused with the J2000 epoch])</li>
<li><code>Observer</code>: An observing body whose viewpoint is used to chart the vector</li>
<li><code>Epoch</code> : An epoch in Ephemeris Time</li>
</ul>


<p>SPICE has an integer-key convention for the kind of bodies that it
has support for. Each body can be referenced via a string or an
integer id. While there isn't an actual strict range for integer ID
classification, it is mentioned <a href="https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/req/naif_ids.html">here</a> and can be summed up
in the following <code>if</code> and <code>elsif</code> clauses. (In Ruby constant strings
are better off as symbols, so the constructor takes either an integer
ID of a string symbol)</p>

<p>```ruby
  if body_id > 2000000</p>

<pre><code>:asteroid
</code></pre>

<p>  elsif body_id > 1000000</p>

<pre><code>:comet
</code></pre>

<p>  elsif body_id > 1000</p>

<pre><code>:body
</code></pre>

<p>  elsif body_id > 10</p>

<pre><code>body_id % 100 == 99 ?
  :planet : :satellite
</code></pre>

<p>  elsif body_id == 10</p>

<pre><code>:star
</code></pre>

<p>  elsif body_id > 0</p>

<pre><code>:barycenter
</code></pre>

<p>  elsif body_id > -1000</p>

<pre><code>:spacecraft
</code></pre>

<p>  elsif body_id > -100000</p>

<pre><code>:instrument
</code></pre>

<p>  else</p>

<pre><code>:spacecraft
</code></pre>

<p>```</p>

<p>It was very tempting to involve inheritance and extend a base Body
class onto these potential classes, but I simply did not see the need
for it at this point. The way it is at the moment, the <code>Body</code> object
has a reader attribute type that stores some metadata about the body
for the user's convenience. Perhaps as coverage of SPICE improves,
this minor thing can be changed later on.</p>

<p>To create a Body object, you instantiate with either a body name or a
body id. Certain bodies such as instruments will require additional
kernels to be loaded. To proceed seamlessly, load a leap seconds
kernel, a planetary constants kernel, and an ephemeris kernel. (All
avaialable in <code>spec/data/kernels</code>)</p>

<p>```ruby
SpiceRub::Body.new(399)
=> #&lt;SpiceRub::Body:0x00000002769da8</p>

<pre><code> @code=399,
 @frame=:J2000,
 @name=:earth,
 @type=:planet&gt;
</code></pre>

<p>SpiceRub::Body.new(:earth)
=> #&lt;SpiceRub::Body:0x000000026c73c8
   @code=399,
   @frame=:J2000,
   @name=:earth,
   @type=:planet></p>

<p>SpiceRub::Body.new(:moon)
=> #&lt;SpiceRub::Body:0x0000000214ac88
   @code=301,
   @frame=:J2000,
   @name=:moon,
   @type=:satellite>
```</p>

<p><code>399</code> and <code>:earth</code> map to the same body in SPICE data. The frame of
reference can also be specified as a named parameter during
instantiation to set a custom default frame for that particular
object.</p>

<p>```ruby
SpiceRub::Body.new(399, frame: IAU_EARTH)
=> #&lt;SpiceRub::Body:0x000000020b1df8</p>

<pre><code> @code=399,
 @frame=:IAU_EARTH,
 @name=:earth,
 @type=:planet&gt;
</code></pre>

<p>```</p>

<p>In SPICE, a <code>state</code> is a 6 length column vector that stores position
and velocity in 3D cartesian co-ordinates</p>

<p>As a base case, let's find out the the position of the Earth with
respect to itself.</p>

<p>```ruby</p>

<p>earth.position_at(SpiceRub::Time.now, observer: earth)
=>
[
  [0.0]   [0.0]   [0.0]
]
```</p>

<p>The origin as seen from itself is still the origin, so this makes
sense. The methods <code>#velocity_at</code> and <code>#state_at</code> take an identical
set of parameters. While there is a bit of redundancy going on,
splitting them makes the API more elegant, but the basic relationship
between these three vectors is the following :-</p>

<p>```ruby</p>

<p>state = [</p>

<pre><code>      position[0],position[1],position[2],  
      velocity[0],velocity[1],velocity[2]
    ]
</code></pre>

<p>```</p>

<p>One thing to note is that state/velocity/position vectors will always
be returned as an <code>NMatrix</code> object, SciRuby's numerical matrix core,
to allow for calculations via the NMatrix API.</p>

<p>As an example that is used in the code, one line can turn a position
vector into distance from origin (here using Euclidean distance):</p>

<p><code>ruby
  position = earth.position_at(SpiceRub::Time.now, observer: observer)
  Math.sqrt( (position ** 2).sum[0] )      
</code></p>

<p>As a simple imprecise experiment, let's find out how the speed of
light can be "estimated" up with this data.</p>

<p>```ruby
distance = moon.distance_from(earth, now)
=> 367441.0260814745</p>

<p>time = moon.light_time_from(earth, now)
=> 1.2256513340354764</p>

<p>distance / time
=> 299792.458
```</p>

<p>The unit of distance here is kilometers, so the speed of light by this
measurement is about pretty close to the textbook figure of 3e+8 m/s.</p>

<p>There is also a function to check if a list of bodies are within a
radial proximity from an observing body. We already calculated the
distance of the moon to be about 367,000 km. The function
<code>within_proximity</code> returns a list of all bodies that are within the
specified radial distance from the calling body object.</p>

<p>```ruby</p>

<h1>assuming venus and mercury are instantiated</h1>

<p>earth.within_proximity([moon, venus, mercury], 400000, now)
=> [#&lt;SpiceRub::Body:0x0000000191c4f8
  @code=301,
  @frame=:J2000,
  @name=:moon,
  @type=:satellite>]
```</p>

<p>Now that we've come to the end of the functionality, I would like to
mention that there is another named argument <code>aberration_correction</code>
which is basically an error reduction method to provide a more
accurate result than the default observation. The default <code>:none</code>
option for aberration correction basically provides the geometric
observations without any corrections for reception or transmission of
photons. For a list of various aberration correction methods
available, have a look at the documentation for <a href="ftp://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/spkpos_c.html">spkpos_c</a> to
find out if you need an aberration correction on SPICE data.</p>

<p>```ruby
d1 = moon.distance_from(earth, SpiceRub::Time.now, aberration_correction: :none)
=> 369111.0550333138
d2 = moon.distance_from(earth, SpiceRub::Time.now, aberration_correction: :LT)
=> 369146.60640691273</p>

<p>d2 - d1
=> 35.55137359892251
```</p>

<p>If you want to look at it another way, no aberration correction would
give you the textbook response of rigid geometry, while introducing an
aberration correction would give you a somewhat more realistic output
accounting for the errors that do happen when these observations are
made.</p>

<p>Finally, if you need to generate a continuous time series for a body,
then <code>SpiceRub::Time</code> has two functions to aid in that:</p>

<p>```ruby
SpiceRub::Time.linear_time_series(now, now + 86400, 4)
=> [</p>

<pre><code>#&lt;SpiceRub::Time:0x00000001fe8b60 @et=525180780.18277323&gt;,
#&lt;SpiceRub::Time:0x00000001fe8a20 @et=525209580.18277323&gt;,
#&lt;SpiceRub::Time:0x00000001fe88b8 @et=525238380.18277323&gt;,
#&lt;SpiceRub::Time:0x00000001fe8750 @et=525267180.18277323&gt;
</code></pre>

<p>   ]
```</p>

<p>In this case, I took a start time and an end time that was one day
after and requested 4 linearly spaced epochs. This is basically an
interface to <code>NMatrix.linspace</code>.</p>

<p>The other function requires you to input a start time and an end time
and a step size that keeps getting added to the start time till the
end time is reached. As a contrived example, we'll take two epochs,
five days apart and ask for a step size of a day, expecting six
elements.</p>

<p>```ruby</p>

<p>SpiceRub::Time.time_series(now, now + 5 * 86400, step: 86400)
=> [</p>

<pre><code>#&lt;SpiceRub::Time:0x00000001646580 @et=525180780.18277323&gt;,
#&lt;SpiceRub::Time:0x00000002f315b8 @et=525267180.18277323&gt;,
#&lt;SpiceRub::Time:0x00000002f31590 @et=525353580.18277323&gt;,
#&lt;SpiceRub::Time:0x00000002f31568 @et=525439980.18277323&gt;,
#&lt;SpiceRub::Time:0x00000002f31540 @et=525526380.18277323&gt;,
#&lt;SpiceRub::Time:0x00000002f31518 @et=525612780.18277323&gt;
</code></pre>

<p>   ]</p>

<p>```</p>

<p>And that's it for this blog post. I would appreciate any feedback
regarding this as I've been juggling the design back and forth very
frequently. There is large potential of expansion of the <code>Body</code> class,
particularly creating new classes as when different Bobdy objects
would have a corresponding function. (For example, the function
<code>getfov_c</code> which returns the field of view of an instrument could be
an instance function attached to the <code>Instrument</code> subclass of <code>Body</code>,
but this is just potential expansions in the future.)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GSoC 2016 : A Look at SpiceRub::Time]]></title>
    <link href="http://sciruby.com/blog/2016/11/25/gsoc-2016-a-look-at-spicerub-time/"/>
    <updated>2016-11-25T02:22:00+09:00</updated>
    <id>http://sciruby.com/blog/2016/11/25/gsoc-2016-a-look-at-spicerub-time</id>
    <content type="html"><![CDATA[<p>Many popular programming languages these days ship with powerful Time
classes/interfaces to make the inevitable task of dealing with
time-related computations a more DRY experience. Humans like their
time representations to be stringy concatenations of various numbers
and alphabets that enable a large variety of date and time formats to
mean the same thing and still make instant sense to the human eye. It
was the creation of time zones that made our convenient 24-hour clocks
stay the way they are without experiencing day and night at the same
"time" across the globe. So now <code>00:00 A.M. UTC</code> is <code>5:30 A.M. IST</code>
for me, and the world remains sane.</p>

<p>But what happens when you accept the fact that you're just a speck of
micro-dust adjusting time relatively for an only slightly bigger speck
of dust floating in the universe? Twenty-four hours in a day and thus we reset
after 2300, but consider: how would a resident of Venus know
when tea-time is on Venus if he had an Earth wristwatch that reset
after twenty-four hours? Barely a tenth of Venus' day is complete in that time!
(If you know anybody intent on relocating to Mars, do not gift them a
clock or watch.)</p>

<p>So a decimal floating point representation must be the answer for
uniformity. Time zones can be dealt with; we'll just pick a convenient
point in time and count the seconds from there onwards so that the
location on Earth doesn't matter henceforth. It'll drive humans insane
with the arithmetic but machines will work just fine with this. This
sort of a time system is called epoch time.</p>

<p>And so the internal time of most UNIX machines is the number of
seconds after midnight on <code>Thursday, 1 January 1970 UTC</code>. (And this
very convention is going to open a can of worms by
<a href="https://en.wikipedia.org/wiki/Year_2038_problem">2038</a> if there is even a small set of critical machines
that haven't moved on from 32-bit architectures.)</p>

<p>But we're still not okay universally. Try going on an infinite journey
to space and you'll find that counting seconds leads to some
inconsistencies with your local time when you try to synchronize with
Earth. How can the number of seconds after January 1970 be different
in any case? Well, your MacBook Pro has not been adjusted for
... relativity! Gravity bends light and thus the perception of
time. There's a lot more mass, and thus a lot more gravitatonal fields
in neighborhoods away from Earth. The exact details of how this works
is beyond the scope of this blog post.</p>

<p>If the past few paragraphs were incessant and seemingly irrelevant,
they were there to drive home the point that Earth time simply will
not do when we step out of the ghetto to see what's happening. But
astronomy's been around for way longer, and astrophysicists came
forth with a time system adjusted for the relativity effects of the
solar system, called Barycentric Dynamical Time, or <em>TDB</em>. Like our
machines, it counts the seconds after a certain known reference time
point, except that it adjusts for relativity and can become a standard
for astronomical time.</p>

<p>There are many similar time scales like this, but SPICE has chosen to
use TDB as the standard for most of their design. Within the SPICE
API, TDB is the same as <em>Ephemeris Time</em> which is the main system used
to specify time points of astronomical bodies. Even though spacecrafts
have their clocks coordinated with UTC on Earth, you would require
that time in Ephemeris Time to be able to calculate their positions and
velocities using SPICE. <code>SpiceRub::Time</code> is built for this very purpose,
to revolve around a main attribute <code>@et</code> for Ephemeris Time and
provide many methods to convert to and from.</p>

<p>If you'd like to proceed with the examples, you'll need a Leap Second
Kernel file to use <code>SpiceRub::Time</code>. This is a generic kernel, so you
can easily use <code>naif0011.tls</code> in <code>spec/data/kernels</code> of the repository
folder.</p>

<p>So Ephemeris Time is the number of seconds elapsed after <code>Noon, January 1, 2000, TDB</code>. This point in time is also known as the <code>J2000</code>
epoch. We find that out in an instant by using the <code>Time.parse</code>
function which is a wrapper function for SPICE's <code>str2et_c</code> that
converts many formats of strings to <code>Ephemeris Time</code>. You can have a
look at the various string formats supported in its documentation
<a href="https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/str2et_c.html">here</a></p>

<p><code>ruby
 SpiceRub::Time.parse("12:00 Jan 1 2000 TDB")
=&gt; #&lt;SpiceRub::Time:0x0000000325b1f8 @et=0.0&gt;
</code></p>

<p>So as a base case, using the reference epoch gives us 0 seconds as we would expect. Now would also be a good time to find out the discrepancy in <code>UTC</code> as well.</p>

<p><code>ruby
SpiceRub::Time.parse("12:00 Jan 1 2000 UTC")
=&gt; #&lt;SpiceRub::Time:0x000000031c28e0 @et=64.18392728473108&gt;
</code></p>

<p>So right away we know that UTC was 64-ish seconds off from TDB / ET at the time of the reference J2000 epoch. What would the difference be around right now?</p>

<p>```ruby
now = SpiceRub::Time.now
=> #&lt;SpiceRub::Time:0x000000030bf8f8 @et=525173312.1827749></p>

<p>(now - now.to_utc).to_f
=> 68.18277490139008</p>

<p>```</p>

<p>Well, here's a surprise, it's 68.18 now. Before I explain why that is,
here is a brief overview of what the above code does:</p>

<p><code>Time.now</code> is a convenient way to specify your current UTC
timezone. It uses Ruby's core <code>Time.now</code> method so this method is only
good if you're working in UTC or Earth like Timezones. For a similar
purpose, the function <code>Time.from_time</code> let's you create a SpiceRub
Time object from a Ruby Time object.</p>

<p>The <code>+/-</code> operators return a new Time object where the right operand
is added/subtracted to the left operand's <code>@et</code> when it is a float or
integer. If a Time object is supplied , then it does the same with the
right operand's ephemeris time instead. (Note that there really isn't
a significant meaning to having a Time object whose @et is the
difference/sum of two other epochs, however you can increase a certain
epoch or decrease it by a constant offset of seconds)</p>

<p>In our case we used <code>#to_utc</code> to convert from ephemeris time to UTC,
and then the minus operator gave us a Time object that wasn't really
an epoch, but a difference of two epochs, so using <code>#to_f</code> got us
exactly that.</p>

<p>It appears that UTC has changed by 4 seconds since 2000 with respect
to ephemeris time. This is actually the adjustment of "leap seconds"
that gets added to UTC to prevent it from falling too far behind other
time systems. (Humans really like to hack everything, don't they?)</p>

<p>To verify this yourself, if you open up the kernel <code>naif0011.tls</code> in your
text editor and search for <code>DELTET/DELTA_AT</code>, you'll find a list like
representation of the following sort :-</p>

<p>```
DELTET/DELTA_AT        = ( 10,   @1972-JAN-1</p>

<pre><code>                       ..,   ...........
                       32,   @1999-JAN-1
                       33,   @2006-JAN-1
                       34,   @2009-JAN-1
                       35,   @2012-JUL-1
                       36,   @2015-JUL-1 )
</code></pre>

<p>```</p>

<p>Here you can see that just before the year 2000, there were 32 leap
seconds added to UTC, and in 2015 when the last leap second was added,
there were 36. It's an ongoing and indefinite process and so there
really is no way to account for leap second errors far in the future
for leap seconds that are yet to be added. As of now, the next
scheduled addition is in December, 2016.</p>

<p>Coming back to our Time object, let's look at its basic
construction. One tricky task in the API was the option to specify
different epochs of reference in different time scales, like
International Atomic Time. As of now, <code>Time.new</code> requires that you
have kept your word of using the J2000 epoch and allows you to use a
named parameter <code>seconds:</code> for specifying the time scale. The use of
<code>scale</code> as a key was avoided as it sometimes is also used to refer to the
reference epoch used.</p>

<p>```ruby</p>

<p>epochs = [:utc, :tdb, :tai].map
  { |scale| SpiceRub::Time.new(0, seconds: scale) }</p>

<p>=> [#&lt;SpiceRub::Time:0x00000002756fc8 @et=64.18392728466942>,</p>

<pre><code>#&lt;SpiceRub::Time:0x00000002756eb0 @et=0&gt;,
#&lt;SpiceRub::Time:0x00000002756cf8 @et=32.18392727400827&gt;]
</code></pre>

<p>```</p>

<p><code>:tai</code> here refers to International Atomic Time. For a list of more
parameters and their keyword abbreviations, have a look at
<a href="https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/unitim_c.html">this</a> SPICE documentation for the function that the
conversion is wrapped on top of.</p>

<p>But there is also a way to reference other epochs without doing the
manual conversions yourself, you can call the class method <code>Time.at</code>
to perform the same function as the constructor, with the option of a
different reference epoch. The resultant Time object will however have
its internal time referring to J2000.</p>

<p>A more readable way would involve step by step calculations, but that
would consume runtime resources everytime <code>Time.at</code> is called, so I've
basically pre-calculated the ephemeris times of the reference epochs
and subtracted them from the epoch.</p>

<p>```ruby
  case reference.downcase
  when :j2100</p>

<pre><code>new(offset + 3155760000.0, seconds: seconds)
</code></pre>

<p>  when :j2000, :et</p>

<pre><code>new(offset, seconds: seconds)      
</code></pre>

<p>  when :j1950</p>

<pre><code>new(offset - 1577880000.0, seconds: seconds)
</code></pre>

<p>  when :j1900</p>

<pre><code>new(offset - 3155760000.0, seconds: seconds)
</code></pre>

<p>  when :gps</p>

<pre><code>new(offset - 630763148.8159368, seconds: seconds)
</code></pre>

<p>  when :unix</p>

<pre><code>new(offset - 946727958.8160644, seconds: seconds)
</code></pre>

<p>  end
```</p>

<p>To quickly verify the last one with the <code>#to_s</code> method:</p>

<p><code>ruby
SpiceRub::Time.new(-946727958.8160644).to_s
=&gt; "Thu Jan 01 00:00:00 UTC 1970"
</code></p>

<p>It's exactly the UNIX epoch! Let's try out 1 day (86400 seconds) after
this epoch:</p>

<p><code>ruby
SpiceRub::Time.at(86400, :unix).to_s
=&gt; "Thu Jan 01 23:59:59 UTC 1970"
</code></p>

<p>Just a second short of heading into the next day, because we've added
86400 TDB seconds and converted the time into a UTC string.</p>

<p>There are some more functions provided to work in tandem with the
<code>Body</code> class that I'll explain more about in the next blog post, but
this more or less covers the core of <code>SpiceRub:Time</code>. Till then,
thanks for reading.</p>
]]></content>
  </entry>
  
</feed>
